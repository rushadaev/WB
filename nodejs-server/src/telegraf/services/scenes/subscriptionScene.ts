import {Scenes, Markup, Composer} from 'telegraf';
import { MyContext } from '../../types/MyContext';
import logger from '../../../utils/logger/loggerTelegram';
import LaravelService from "../../../services/laravelService";


const defaultButtons = [
    [Markup.button.callback('üëà –ù–∞–∑–∞–¥', 'back')],
    [Markup.button.callback('üëå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')],
];
const tariffHandler = new Composer<MyContext>();
tariffHandler.action(/tariff_\d+/, async (ctx) => {
    logger.info('Tariff selected:', { tariffId: ctx.match.input });
    logger.info('Received update', { update: ctx.update });
    const tariffId = ctx.match.input.split('_')[1];
    ctx.session.selectedTariff = tariffId;

    await ctx.answerCbQuery('üòé –í—ã–±—Ä–∞–Ω —Ç–∞—Ä–∏—Ñ' + tariffId);

    logger.info('entered confirm payment');
    try {
        // Simulate payment confirmation
        // In reality, you would handle this via a webhook endpoint
        const paymentSuccessful = true; // Replace with actual payment status

        if (paymentSuccessful) {
            // Update session or database as needed
            ctx.session.count = (ctx.session.count || 0) + 1;

           // answer notification
            await ctx.answerCbQuery('–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!', {
                show_alert: true,
            });

            return ctx.scene.enter('subscriptionWizard');
        } else {
            await ctx.editMessageText('–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
            await ctx.scene.enter('subscriptionWizard');
            return ctx.scene.leave();
        }
    } catch (error) {
        logger.error('Error confirming payment:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');

        return ctx.scene.enter('main');
    }
});

const sendStartMessage = async (ctx: MyContext) => {

    let user = null;
    try{
        user = await LaravelService.getUserByTelegramId(ctx.from.id);
    } catch (error) {
        logger.error('Error getting user:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
    }

    const message = `ü´° –ü–æ–¥–ø–∏—Å–∫–∞
–î–æ—Å—Ç—É–ø–Ω–æ –∞–≤—Ç–æ–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: ${user?.autobookings || 1}
–í—ã–±–µ—Ä–µ—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª-–≤–æ –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π üôå

1 –∞–≤—Ç–æ–±—Ä–æ–Ω—å ‚Äì 250‚ÇΩ  
5 –∞–≤—Ç–æ–±—Ä–æ–Ω–µ–π ‚Äì 1.000‚ÇΩ  
10 –∞–≤—Ç–æ–±—Ä–æ–Ω–µ–π ‚Äì 1.850‚ÇΩ  
20 –∞–≤—Ç–æ–±—Ä–æ–Ω–µ–π ‚Äì 3.500‚ÇΩ  
50 –∞–≤—Ç–æ–±—Ä–æ–Ω–µ–π ‚Äì 6.800‚ÇΩ`;

    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üòé –í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ', 'choose_tariff')],
        [Markup.button.callback('üëå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')],
    ]);

    if (ctx.callbackQuery && ctx.callbackQuery.message) {
        // If the interaction is from a callback query, edit the existing message
        await ctx.editMessageText(message, keyboard);
        await ctx.answerCbQuery('üíé –ü–æ–¥–ø–∏—Å–∫–∞');
    } else {
        // Otherwise, send a new message
        await ctx.reply(message, keyboard);
    }

}

const subscriptionWizard = new Scenes.WizardScene<MyContext>(
    'subscriptionWizard',
    // Step 1: Show subscription options
    async (ctx) => {
        await sendStartMessage(ctx);
        return ctx.wizard.next();
    },

    // Step 2: Handle tariff selection
    async (ctx) => {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–µ —è–≤–ª—è—é—â–∏–µ—Å—è callbackQuery
        if (!ctx.callbackQuery) return undefined;

        const tariffs = [
            { id: 1, name: '1 –∞–≤—Ç–æ–±—Ä–æ–Ω—å', price: 250 },
            { id: 5, name: '5 –∞–≤—Ç–æ–±—Ä–æ–Ω–µ–π', price: 1000 },
            { id: 10, name: '10 –∞–≤—Ç–æ–±—Ä–æ–Ω–µ–π', price: 1850 },
            { id: 20, name: '20 –∞–≤—Ç–æ–±—Ä–æ–Ω–µ–π', price: 3500 },
            { id: 50, name: '50 –∞–≤—Ç–æ–±—Ä–æ–Ω–µ–π', price: 6800 },
        ];

        const webUrl = 'https://botcomment.xyz';

        const tariffButtons = tariffs.map((tariff) => [
            Markup.button.url(`${tariff.name} ‚Äì ${tariff.price}‚ÇΩ`, `${webUrl}/payment_link/${ctx.from.id}/${tariff.id}`)
        ]);



        await ctx.editMessageText('ü´° –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:', Markup.inlineKeyboard([ ...tariffButtons, ...defaultButtons]));
        await ctx.answerCbQuery('üòé –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ');
        return ctx.wizard.next();
    },
    tariffHandler,
);

// Handle actions within the wizard
subscriptionWizard.action('mainmenu', async (ctx) => {
    await ctx.scene.enter('main');
    await ctx.answerCbQuery('üëå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é');
});

subscriptionWizard.action('back', async (ctx) => {
    await ctx.wizard.back();
    await sendStartMessage(ctx);
});

subscriptionWizard.command('start', async (ctx) => {
    await ctx.scene.enter('main');
});

// Export the scene
export default subscriptionWizard;
