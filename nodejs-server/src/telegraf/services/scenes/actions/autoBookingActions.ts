// ./scenes/autoBookingActions.ts

import { Markup } from 'telegraf';
import {bold, code, fmt, link} from "telegraf/format";
import { MyContext } from '../../../types/MyContext';
import logger from '../../../../utils/logger/loggerTelegram';
import WarehouseService from "../../../../services/WarehouseService";
import {createOrderRequest, getDraftsForUser} from "../../../../services/wildberriesService";
import CacheService from '../../../../utils/redis/Cache/Cache';
import { COEFFICIENTS, BOX_TYPES, DATES, WAREHOUSES, COEFFICIENTS_TEXT_ONLY, BOX_TYPES_TEXT_ONLY } from "../../../../utils/wildberries/consts";
import {formatDateDDMMYYYY} from "../../../../utils/dateUtils";
import LaravelService from "../../../../services/laravelService";

// Default buttons with Back and Main Menu
const defaultButtons = [
    [Markup.button.callback('üëà –ù–∞–∑–∞–¥', 'back')],
    [Markup.button.callback('üëå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')],
];

const defaultButtonsMenuOnly = [
    [Markup.button.callback('üëå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')],
];

export const sendSearchSlotMessage = async (ctx: MyContext) => {
    const message = fmt`ü´° –ü–æ–∏—Å–∫ —Å–ª–æ—Ç–æ–≤
    
–ü–æ–∏—Å–∫ —Å–ª–æ—Ç–æ–≤ ‚Äî –∑–∞–ø—É—Å–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ –≤–∞—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–π —Å–ª–æ—Ç –±—É–¥–µ—Ç –Ω–∞–π–¥–µ–Ω, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.

–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–∫–∏ - /autobooking`;
    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üöÄ –ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å', 'search_slot')],
        ...defaultButtonsMenuOnly
    ]);

    try {
        await ctx.editMessageText(message, {
            ...keyboard,
            link_preview_options: {
                is_disabled: true
            },
        });
        await ctx.answerCbQuery('üîç –ü–æ–∏—Å–∫ —Å–ª–æ—Ç–æ–≤');
    } catch (error) {
        logger.error('Error sending search slot message:', error);
        await ctx.reply(message, keyboard);
    }
};
/**
 * Sends the cabinet selection message with available cabinets.
 */
export const sendCabinetSelection = async (ctx: MyContext, cabinets: any[]) => {

    const activeCabinets = cabinets.filter(cab => cab?.settings?.cabinet_id && cab?.settings?.is_active);

    let cabinetsButtons = [];
    if(activeCabinets.length > 0) {
        cabinetsButtons = activeCabinets.map((cabinet) => {
            return [Markup.button.callback(`üì¶ ${cabinet.name}`, `select_cabinet_${cabinet.settings.cabinet_id}`)];
        });
    } else{
        cabinetsButtons = [
            [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–±–∏–Ω–µ—Ç', 'create_cabinet')],
        ];
    }

    const keyboard = Markup.inlineKeyboard(
        [...cabinetsButtons, ...defaultButtonsMenuOnly]
    );

    const message = fmt`ü´° –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç`;

    try {
        await ctx.editMessageText(message, {
            ...keyboard,
            link_preview_options: {
                is_disabled: true
            },
        });
        await ctx.answerCbQuery('üì¶ –ê–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ');
    } catch (error) {
        logger.error('Error sending cabinet selection message:', error);
        await ctx.reply(message, keyboard);
    }
};

/**
 * Sends the draft selection message with available drafts.
 */
export const sendDraftSelection = async (ctx: MyContext) => {
    try {
        await ctx.answerCbQuery('üòé –ò—â–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫–∏');
    } catch (error) {
        logger.error('Error answering callback query:', error);
    }

    logger.info('Entered draft selection');
    try {
        const cacheKey = `drafts_data_${ctx.from.id}`;
        const selectedCabinetId = ctx.session.autobookingForm.cabinetId;
        const drafts = await CacheService.rememberCacheValue(
            cacheKey,
            () => getDraftsForUser(selectedCabinetId),
            10 // Cache expiration set to 2 hours
        );

        if (!drafts || drafts.length === 0) {
            await ctx.answerCbQuery('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤', {
                show_alert: true,
            });
            return;
        }

        const draftButtons = drafts.map((draft) => {
            const date = new Date(draft.createdAt).toLocaleDateString('ru-RU');
            const goodQuantity = draft.goodQuantity;
            const title = `${date} ‚Äì –∫–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ ‚Äì ${goodQuantity} —à—Ç.`;

            return [Markup.button.callback(`¬∑ ${title}`, `select_draft_${draft.draftId}`)];
        });

        const keyboard = Markup.inlineKeyboard([...draftButtons, ...defaultButtons]);

        const message = "ü´° –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ üëá";

        await ctx.editMessageText(message, {
            ...keyboard,
            link_preview_options: {
                is_disabled: true
            },
        });
    } catch (error) {
        logger.error('Error getting drafts:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', Markup.inlineKeyboard(defaultButtonsMenuOnly));
        throw error;
    }
};

/**
 * Sends the warehouse selection message with available warehouses.
 */
export const sendWarehouseSelection = async (ctx: MyContext) => {
    logger.info('Entered warehouse selection');
    try {
        const warehouses = await WarehouseService.getWarehouses(ctx.session.page);
        const warehouseButtons = warehouses.keyboard.map((row) => row.map((button) => {
            return Markup.button.callback(button.text, button.callback_data);
        }));

        const keyboard = Markup.inlineKeyboard([...warehouseButtons, ...defaultButtons]);

        const message = fmt`ü´° –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Å–∫–ª–∞–¥`;

        try {
            await ctx.answerCbQuery('üòé –í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥');
            await ctx.editMessageText(message, {
                ...keyboard,
                link_preview_options: {
                    is_disabled: true
                },
            });
        } catch (error) {
            logger.error('Error sending warehouse selection message:', error);
            await ctx.reply(message, keyboard);
        }
    } catch (error) {
        logger.error('Error sending warehouse selection message:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫–ª–∞–¥–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', Markup.inlineKeyboard(defaultButtons));
    }
};

/**
 * Sends the coefficient selection message with available coefficients.
 */
export const sendCoefficientSelection = async (ctx: MyContext) => {
    const warehouseId = ctx.session.autobookingForm.warehouseId;

    const message = fmt`ü´° –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç

–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –≤—ã –≤—ã–±–µ—Ä–µ—Ç–µ –¥–æ ${code(`x2`)}, –±–æ—Ç –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º –¥–æ ${code(`x2`)}, –≤–∫–ª—é—á–∞—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ, ${code(`x1`)} –∏ ${code(`x2`)}.

${bold(`–î–∞–Ω–Ω—ã–µ –ø–æ –∑–∞—è–≤–∫–µ`)}: 

${bold(`–°–∫–ª–∞–¥`)} ‚Äî ${code(WAREHOUSES[warehouseId])}`;

    let coefficientsButtons = [];

    // Add the first button as a separate row
    coefficientsButtons.push([
        Markup.button.callback(COEFFICIENTS[0], `wh_coefficient_set_0`)
    ]);

    // Add the remaining buttons in pairs
    for (let i = 1; i < 7; i += 2) {
        let row = [
            Markup.button.callback(COEFFICIENTS[i], `wh_coefficient_set_${i}`)
        ];

        if (i + 1 < 7) {
            row.push(Markup.button.callback(COEFFICIENTS[i + 1], `wh_coefficient_set_${i + 1}`));
        }

        coefficientsButtons.push(row);
    }

    const keyboard = Markup.inlineKeyboard([...coefficientsButtons, ...defaultButtons]);

    try {
        await ctx.editMessageText(message, {
            ...keyboard,
            link_preview_options: {
                is_disabled: true
            },
        });
        await ctx.answerCbQuery('üòé –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç');
    } catch (error) {
        logger.error('Error sending coefficient selection message:', error);
        await ctx.reply(message, keyboard);
    }
};

/**
 * Sends the box type selection message with available box types.
 */
export const sendBoxTypeSelection = async (ctx: MyContext) => {
    const warehouseId = ctx.session.autobookingForm.warehouseId;
    const coefficient = ctx.session.autobookingForm.coefficient;

    const message = fmt`ü´° –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–ø–∞–∫–æ–≤–∫–∏

${bold(`–î–∞–Ω–Ω—ã–µ –ø–æ –∑–∞—è–≤–∫–µ`)}: 

${bold(`–°–∫–ª–∞–¥`)} ‚Äî ${code(WAREHOUSES[warehouseId])}
${bold(`–ö–æ—ç—Ñ—Ñ–∏—Ü–µ–Ω—Ç`)} ‚Äî ${code(COEFFICIENTS_TEXT_ONLY[coefficient])}`;

    const boxTypes = [];
    for (const key in BOX_TYPES) {
        boxTypes.push([Markup.button.callback(BOX_TYPES[key], `wh_box_type_set_${key}`)]);
    }

    const keyboard = Markup.inlineKeyboard([...boxTypes, ...defaultButtons]);

    try {
        await ctx.editMessageText(message, {
            ...keyboard,
            link_preview_options: {
                is_disabled: true
            },
        });
        await ctx.answerCbQuery('üòé –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–ø–∞–∫–æ–≤–∫–∏');
    } catch (error) {
        logger.error('Error sending box type selection message:', error);
        await ctx.reply(message, keyboard);
    }
};

/**
 * Sends the date selection message with available date options.
 */
export const sendDateSelection = async (ctx: MyContext) => {
    const warehouseId = ctx.session.autobookingForm.warehouseId;
    const coefficient = ctx.session.autobookingForm.coefficient;
    const boxTypeId = ctx.session.autobookingForm.boxTypeId;

    const message = fmt`ü´° –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –¥–∞—Ç—É

–ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –æ–ø—Ü–∏—è "–Ω–µ–¥–µ–ª—è" –∏–ª–∏ "–º–µ—Å—è—Ü", –≤—ã –∑–∞–¥–∞—ë—Ç–µ –ø–µ—Ä–∏–æ–¥, –∏ –±–æ—Ç –Ω–∞–π–¥—ë—Ç –±–ª–∏–∂–∞–π—à—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –¥–∞—Ç—É –≤ —ç—Ç–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ.

${bold(`–î–∞–Ω–Ω—ã–µ –ø–æ –∑–∞—è–≤–∫–µ`)}: 

${bold(`–°–∫–ª–∞–¥`)} ‚Äî ${code(WAREHOUSES[warehouseId])}
${bold(`–ö–æ—ç—Ñ—Ñ–∏—Ü–µ–Ω—Ç`)} ‚Äî ${code(COEFFICIENTS_TEXT_ONLY[coefficient])}
${bold(`–¢–∏–ø —É–ø–∞–∫–æ–≤–∫–∏`)} ‚Äî ${code(BOX_TYPES_TEXT_ONLY[boxTypeId])}
${boxTypeId === '5' && ctx.session.autobookingForm.monopalletCount ? fmt`${bold('–ö–æ–ª-–≤–æ –º–æ–Ω–æ–ø–∞–ª–ª–µ—Ç–æ–≤')}: ${code(ctx.session.autobookingForm.monopalletCount)}` : ''}
`;

    const dates = [];

    for (const key in DATES) {
        dates.push([Markup.button.callback(DATES[key], `wh_date_set_${key}`)]);
    }

    const keyboard = Markup.inlineKeyboard([
        ...dates,
        ...defaultButtons
    ]);

    try {
        await ctx.editMessageText(message, {
            ...keyboard,
            link_preview_options: {
                is_disabled: true
            },
        });
        await ctx.answerCbQuery('üòé –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É');
    } catch (error) {
        logger.error('Error sending date selection message:', error);
        await ctx.reply(message, keyboard);
    }
};

/**
 * Sends the order confirmation message.
 */
export const sendOrderConfirmation = async (ctx: MyContext, selectedDate: string) => {
    let datesText: string = '';
    if (selectedDate === 'customdates') {
        datesText = ctx.session.autobookingForm.dates.join(', ');
    } else {
        const checkUntilDate = new Date();

        const todayDate = formatDateDDMMYYYY(new Date());
        let prefix = '';
        switch (selectedDate) {
            case 'today':
                checkUntilDate.setHours(23, 59, 59, 999);
                break;
            case 'tomorrow':
                checkUntilDate.setDate(checkUntilDate.getDate() + 1);
                checkUntilDate.setHours(23, 59, 59, 999);
                break;
            case 'week':
                checkUntilDate.setDate(checkUntilDate.getDate() + 7);
                checkUntilDate.setHours(23, 59, 59, 999);
                prefix = `${todayDate} - `;
                break;
            case 'month':
                checkUntilDate.setMonth(checkUntilDate.getMonth() + 1);
                checkUntilDate.setHours(23, 59, 59, 999);
                prefix = `${todayDate} - `;
                break;
        }

        ctx.session.autobookingForm.checkUntilDate = formatDateDDMMYYYY(checkUntilDate);

        datesText = `${prefix}${ctx.session.autobookingForm.checkUntilDate}`;
    }

    const warehouseId = ctx.session.autobookingForm.warehouseId;
    const coefficient = ctx.session.autobookingForm.coefficient;
    const boxTypeId = ctx.session.autobookingForm.boxTypeId;


    const message = fmt`
${bold(`ü´° –í–∞—à–∞ –∑–∞—è–≤–∫–∞`)}: 

${bold(`–°–∫–ª–∞–¥`)} ‚Äî ${code(WAREHOUSES[warehouseId])}
${bold(`–ö–æ—ç—Ñ—Ñ–∏—Ü–µ–Ω—Ç`)} ‚Äî ${code(COEFFICIENTS_TEXT_ONLY[coefficient])}
${bold(`–¢–∏–ø —É–ø–∞–∫–æ–≤–∫–∏`)} ‚Äî ${code(BOX_TYPES_TEXT_ONLY[boxTypeId])}
${boxTypeId === '5' && ctx.session.autobookingForm.monopalletCount ? fmt`${bold('–ö–æ–ª-–≤–æ –º–æ–Ω–æ–ø–∞–ª–ª–µ—Ç–æ–≤')}: ${code(ctx.session.autobookingForm.monopalletCount)}` : ''}
${bold(`–î–∞—Ç–∞`)} ‚Äî ${code(datesText)}

`;

    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üöÄ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', 'confirm_order')],
        ...defaultButtons
    ]);

    try {
        await ctx.editMessageText(message, {
            ...keyboard,
            link_preview_options: {
                is_disabled: true
            },
        });
        await ctx.answerCbQuery('üòé –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑');
    } catch (error) {
        logger.error('Error sending order confirmation message:', error);
        await ctx.reply(message, keyboard);
    }
};

/**
 * Sends the final confirmation message after the order is confirmed.
 */
export const sendFinalConfirmation = async (ctx: MyContext) => {
    let datesText: string = '';
    if (ctx.session.autobookingForm.dates.length > 0) {
        datesText = ctx.session.autobookingForm.dates.join(', ');
    } else {
        datesText = ctx.session.autobookingForm.checkUntilDate;
    }

   if(ctx.session.autobookingForm.isBooking) {
       //creating order in wb
       try {
           let userId = ctx.session.autobookingForm.cabinetId;
           let draftId = ctx.session.autobookingForm.draftId;
           let warehouseId = ctx.session.autobookingForm.warehouseId;
           let boxTypeMask = ctx.session.autobookingForm.boxTypeId;

           const response = await createOrderRequest(userId, draftId, warehouseId, boxTypeMask);
           ctx.session.autobookingForm.preorderId = response.preorderID;
       } catch (error) {
           logger.error('Error creating order:', error
           );
           await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', Markup.inlineKeyboard(defaultButtonsMenuOnly));
           throw error;
       }
   }

    try {
        await LaravelService.createNotificationByTelegramId(ctx.from.id, ctx.session.autobookingForm);
    } catch (error) {
        logger.error('Error creating notification:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', Markup.inlineKeyboard(defaultButtonsMenuOnly));
        throw error;
    }

    const warehouseId = ctx.session.autobookingForm.warehouseId;
    const coefficient = ctx.session.autobookingForm.coefficient;
    const boxTypeId = ctx.session.autobookingForm.boxTypeId;

    const isBookingMessage = ctx.session.autobookingForm.isBooking ? ', –∫–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞–π–¥–µ–º –Ω–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–±—Ä–æ–Ω–∏—Ä—É–µ—Ç –ø–æ—Å—Ç–∞–≤–∫—É' : '';
    const message = fmt`ü´° –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≥–æ—Ç–æ–≤–∞ 

–ú—ã —É–∂–µ –∏—â–µ–º —Ç–∞–π–º-—Å–ª–æ—Ç –¥–ª—è –≤–∞—à–µ–π –ø–æ—Å—Ç–∞–≤–∫–∏${isBookingMessage}. –ö–∞–∂–¥—ã–µ 24 —á–∞—Å–∞ –º—ã –±—É–¥–µ–º –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ ü´∂

${bold(`–î–∞–Ω–Ω—ã–µ –ø–æ –∑–∞—è–≤–∫–µ`)}: 

${bold(`–°–∫–ª–∞–¥`)} ‚Äî ${code(WAREHOUSES[warehouseId])}
${bold(`–ö–æ—ç—Ñ—Ñ–∏—Ü–µ–Ω—Ç`)} ‚Äî ${code(COEFFICIENTS_TEXT_ONLY[coefficient])}
${bold(`–¢–∏–ø —É–ø–∞–∫–æ–≤–∫–∏`)} ‚Äî ${code(BOX_TYPES_TEXT_ONLY[boxTypeId])}
${boxTypeId === '5' && ctx.session.autobookingForm.monopalletCount ? fmt`${bold('–ö–æ–ª-–≤–æ –º–æ–Ω–æ–ø–∞–ª–ª–µ—Ç–æ–≤')}: ${code(ctx.session.autobookingForm.monopalletCount)}` : ''}
${bold(`–î–∞—Ç–∞`)} ‚Äî ${code(datesText)}
`;

    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üëå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')],
    ]);

    try {
        await ctx.editMessageText(message, {
            ...keyboard,
            link_preview_options: {
                is_disabled: true
            },
        });
    } catch (error) {
        logger.error('Error sending final confirmation message:', error);
        await ctx.reply(message, keyboard);
    }
};

/**
 * Sends a prompt asking the user to input custom dates.
 */
export const sendCustomDatePrompt = async (ctx: MyContext) => {
    const message = fmt`ü´° –í–≤–µ–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã—Ö –¥–∞—Ç —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, –Ω–∞–ø—Ä–∏–º–µ—Ä:
‚Ä¢ ${code('10.08.2025, 12.08.2025')}

–ù–∞ –∫–∞–∂–¥—É—é –¥–∞—Ç—É –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–∞—è –∑–∞—è–≤–∫–∞.`;

    const keyboard = Markup.inlineKeyboard([...defaultButtons]);

    try {
        await ctx.editMessageText(message, {
            ...keyboard,
            link_preview_options: {
                is_disabled: true
            },
        });
        await ctx.answerCbQuery('üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞—Ç—ã');
    } catch (error) {
        logger.error('Error sending custom date prompt:', error);
        await ctx.reply(message, keyboard);
    }
};

/**
 * Sends a pallet count input prompt.
 */
export const sendPalletCountPrompt = async (ctx: MyContext) => {
    const warehouseId = ctx.session.autobookingForm.warehouseId;
    const coefficient = ctx.session.autobookingForm.coefficient;
    const boxTypeId = ctx.session.autobookingForm.boxTypeId;

    const message = fmt`ü´° –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –º–æ–Ω–æ–ø–∞–ª–ª–µ—Ç–æ–≤
    
${bold(`–î–∞–Ω–Ω—ã–µ –ø–æ –∑–∞—è–≤–∫–µ`)}:
${bold(`–°–∫–ª–∞–¥`)} ‚Äî ${code(WAREHOUSES[warehouseId])}
${bold(`–ö–æ—ç—Ñ—Ñ–∏—Ü–µ–Ω—Ç`)} ‚Äî ${code(COEFFICIENTS_TEXT_ONLY[coefficient])}
${bold(`–¢–∏–ø —É–ø–∞–∫–æ–≤–∫–∏`)} ‚Äî ${code(BOX_TYPES_TEXT_ONLY[boxTypeId])}
    `;

    const keyboard = Markup.inlineKeyboard([...defaultButtons]);

    try {
        await ctx.editMessageText(message, {
            ...keyboard,
            link_preview_options: {
                is_disabled: true
            },
        });
        await ctx.answerCbQuery('üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–æ–ø–∞–ª–ª–µ—Ç–æ–≤');
    } catch (error) {
        logger.error('Error sending pallet count prompt:', error);
        await ctx.reply(message, keyboard);
    }
}

/**
 * Sends an error message with a standard keyboard.
 */
export const sendErrorMessage = async (ctx: MyContext, errorMsg: string) => {
    const keyboard = Markup.inlineKeyboard([...defaultButtons]);

    try {
        await ctx.editMessageText(errorMsg, {
            ...keyboard,
            link_preview_options: {
                is_disabled: true
            },
        });
    } catch (error) {
        logger.error('Error sending error message:', error);
        await ctx.reply(errorMsg, keyboard);
    }
};

export const sendInstructions = async (ctx: MyContext) => {
    const message = fmt`–°–æ–∑–¥–∞–π—Ç–µ –≤ –∫–∞–±–∏–Ω–µ—Ç–µ —á–µ—Ä–Ω–æ–≤–∏–∫ –ø–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –≤—ã–±–∏—Ä–∞—è –¥–∞—Ç—É –∏ —Å–∫–ª–∞–¥ –ø–æ—Å—Ç–∞–≤–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —á–µ—Ä–Ω–æ–≤–∏–∫.
–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ ‚Äî ${link(`—Ç—É—Ç.`, 'http://surl.li/awdppl')}`;

    const buttonCreate = [Markup.button.callback('ü§û –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É –∏–∑ —á–µ—Ä–Ω–æ–≤–∏–∫–∞', 'start_autobooking')];
    const keyboard = Markup.inlineKeyboard([buttonCreate, ...defaultButtons]);


    try {
        await ctx.editMessageText(message, {
            ...keyboard,
            link_preview_options: {
                is_disabled: true
            },
        });
        await ctx.answerCbQuery('üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏');
    } catch (error) {
        logger.error('Error sending instructions:', error);
        await ctx.reply(message, keyboard);
    }

}

