import {Telegraf} from "telegraf";
import {MyContext} from "../types/MyContext";

import CacheService from '../../utils/redis/Cache/Cache';
class WarehouseBot {
    private bot: Telegraf<MyContext>;
    constructor(bot: Telegraf<MyContext>) {
        this.bot = bot;
    }

    async handleStart(chatId: number) {
        let user = null;
        // Fetch user data from Laravel API
        try {
            user = await this.fetchUserByTelegramId(chatId);
        } catch (error) {
            console.error('Error fetching user:', error);
            return;
        }

        let formattedDate = '';
        if (user?.subscription_until) {
            const subscriptionUntil = new Date(user.subscription_until);
            if (subscriptionUntil.getFullYear() >= 2124) {
                formattedDate = '–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –Ω–∞–≤—Å–µ–≥–¥–∞';
            } else {
                formattedDate = `–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ ${subscriptionUntil.toLocaleDateString('ru-RU')}`;
            }
        }
        if (!user.is_paid) {
            formattedDate = '–£ –≤–∞—Å –¥–µ–π—Å—Ç–≤—É–µ—Ç 3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ü§ù';
        }

        let message = '';
        if (!user.has_active_subscription) {
            message = `–ù–∞–π–¥–∏—Ç–µ!!! –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø—Ä–∏–µ–º–∫—É –Ω–∞ WB üî•

–ú—ã –ø–æ–º–æ–≥–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–∏–µ–º–∫–∏ –Ω–∞ Wildberries. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ–Ω–ª–∞–π–Ω –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–ª–æ—Ç–∞—Ö –¥–ª—è –ø—Ä–∏–µ–º–∫–∏ —Ç–æ–≤–∞—Ä–∞. ü§ô

–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?

1. –í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥.
2. –£–∫–∞–∂–∏—Ç–µ –≤ —á–µ–º –±—É–¥–µ—Ç–µ –æ—Ç–≥—Ä—É–∂–∞—Ç—å.
3. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏–µ–º–∫–∏.
4. –ñ–¥–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.

–ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞–π–º-—Å–ª–æ—Ç, –º—ã —Å—Ä–∞–∑—É –∂–µ –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. –í—ã –º–æ–∂–µ—Ç–µ —Å—Ç–∞–≤–∏—Ç—å –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

‚ö†Ô∏è–ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å`;
        } else {
            message = `–ù–∞–π–¥–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø—Ä–∏–µ–º–∫—É –Ω–∞ WB üî•

–ú—ã –ø–æ–º–æ–≥–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–∏–µ–º–∫–∏ –Ω–∞ Wildberries. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ–Ω–ª–∞–π–Ω –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–∞—Ö –¥–ª—è –ø—Ä–∏–µ–º–∫–∏ —Ç–æ–≤–∞—Ä–∞. ü§ô

–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?

1. –í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥.
2. –£–∫–∞–∂–∏—Ç–µ –≤ —á–µ–º –±—É–¥–µ—Ç–µ –æ—Ç–≥—Ä—É–∂–∞—Ç—å.
3. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏–µ–º–∫–∏.
4. –ñ–¥–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.

–ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞–π–º-—Å–ª–æ—Ç, –º—ã —Å—Ä–∞–∑—É –∂–µ –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. –í—ã –º–æ–∂–µ—Ç–µ —Å—Ç–∞–≤–∏—Ç—å –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

${formattedDate}`;
        }

        const keyboard = {
            inline_keyboard: [
                [
                    { text: 'üì¶ –ê–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', callback_data: 'wh_notification' },
                ],
                [
                    { text: '‚ö° –ü–æ–∏—Å–∫ —Å–ª–æ—Ç–æ–≤', callback_data: 'wh_notification' },
                    { text: 'üìù –ó–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–∏—Å–∫ —Å–ª–æ—Ç–æ–≤', callback_data: 'wh_notification' },
                ],
                [
                    { text: 'üôå –ú–æ–∏ –∫–∞–±–∏–Ω–µ—Ç—ã', callback_data: 'wh_payment' },
                    { text: 'üíé –ü–æ–¥–ø–∏—Å–∫–∞', callback_data: 'wh_payment' },
                ],
                [
                    { text: 'üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', url: 'https://t.me/dmitrynovikov21' },
                    { text: 'üìç –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏', url: 'https://t.me/dmitrynovikov21' },
                ],
            ],
        };

        await this.bot.telegram.sendMessage(chatId, message, {
            parse_mode: 'HTML',
            reply_markup: keyboard,
        });
    }

    async fetchUserByTelegramId(telegramId: number) {
        try {
            return await CacheService.getUserByTelegramId(telegramId);
        } catch (error) {
            console.error('Error fetching user:', error);
            return null;
        }
    }

    // Implement other methods like handleNotification, handlePayment, etc.
}

export default WarehouseBot;
