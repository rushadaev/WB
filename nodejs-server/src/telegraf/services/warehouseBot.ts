import {Telegraf} from "telegraf";
import {MyContext} from "../types/MyContext";

import CacheService from '../../utils/redis/Cache/Cache';
class WarehouseBot {
    private bot: Telegraf<MyContext>;
    constructor(bot: Telegraf<MyContext>) {
        this.bot = bot;
    }

    async handleStart(chatId: number) {
        const message = "‚ö°–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–∂—É –∏ –±—Ä–æ–Ω–∏—Ä—É—é –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö Wildberries. –í—ã–±–∏—Ä–∞–π—Ç–µ —É–¥–æ–±–Ω—ã–π —Ç–∞—Ä–∏—Ñ –∏ –±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ –ø–æ—Å—Ç–∞–≤–∫–∏." +
            "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é üëá";

        const keyboard = {
            inline_keyboard: [
                [
                    { text: 'üì¶ –ê–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', callback_data: 'wh_notification' },
                ],
                [
                    { text: '‚ö° –ü–æ–∏—Å–∫ —Å–ª–æ—Ç–æ–≤', callback_data: 'wh_notification' },
                    { text: 'üìù –ó–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–∏—Å–∫ —Å–ª–æ—Ç–æ–≤', callback_data: 'wh_notification' },
                ],
                [
                    { text: 'üôå –ú–æ–∏ –∫–∞–±–∏–Ω–µ—Ç—ã', callback_data: 'wh_payment' },
                    { text: 'üíé –ü–æ–¥–ø–∏—Å–∫–∞', callback_data: 'wh_payment' },
                ],
                [
                    { text: 'üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', url: 'https://t.me/dmitrynovikov21' },
                    { text: 'üìç –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏', url: 'https://t.me/dmitrynovikov21' },
                ],
            ],
        };

        await this.bot.telegram.sendMessage(chatId, message, {
            parse_mode: 'HTML',
            reply_markup: keyboard,
        });
    }

    async fetchUserByTelegramId(telegramId: number) {
        try {
            return await CacheService.getUserByTelegramId(telegramId);
        } catch (error) {
            console.error('Error fetching user:', error);
            return null;
        }
    }

    // Implement other methods like handleNotification, handlePayment, etc.
}

export default WarehouseBot;
