{"version":3,"file":"main.js","mappings":"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","sources":["webpack://nodejs-server/./src/controllers/acceptanceController.ts","webpack://nodejs-server/./src/controllers/authController.ts","webpack://nodejs-server/./src/controllers/draftsController.ts","webpack://nodejs-server/./src/controllers/ordersController.ts","webpack://nodejs-server/./src/routes/acceptance.ts","webpack://nodejs-server/./src/routes/auth.ts","webpack://nodejs-server/./src/routes/drafts.ts","webpack://nodejs-server/./src/routes/orders.ts","webpack://nodejs-server/./src/services/WarehouseService.ts","webpack://nodejs-server/./src/services/authService.ts","webpack://nodejs-server/./src/services/jobQueue.ts","webpack://nodejs-server/./src/services/laravelService.ts","webpack://nodejs-server/./src/services/wildberriesService.ts","webpack://nodejs-server/./src/services/wildberriesSuppliesApi.ts","webpack://nodejs-server/./src/telegraf/controllers/telegramController.ts","webpack://nodejs-server/./src/telegraf/services/scenes/actions/autoBookingActions.ts","webpack://nodejs-server/./src/telegraf/services/scenes/autoBookingScene.ts","webpack://nodejs-server/./src/telegraf/services/scenes/createCabinetScene.ts","webpack://nodejs-server/./src/telegraf/services/scenes/mainScene.ts","webpack://nodejs-server/./src/telegraf/services/scenes/reauthCabinetScene.ts","webpack://nodejs-server/./src/telegraf/services/scenes/searchRequestsScene.ts","webpack://nodejs-server/./src/telegraf/services/scenes/searchSlotsScene.ts","webpack://nodejs-server/./src/telegraf/services/scenes/showCabinetsScene.ts","webpack://nodejs-server/./src/telegraf/services/scenes/subscriptionScene.ts","webpack://nodejs-server/./src/telegraf/services/warehouseBot.ts","webpack://nodejs-server/./src/telegraf/utils/cabinetGate.ts","webpack://nodejs-server/./src/utils/clusterManager.ts","webpack://nodejs-server/./src/utils/dateUtils.ts","webpack://nodejs-server/./src/utils/logger/loggerTelegram.ts","webpack://nodejs-server/./src/utils/pow/solveTask.ts","webpack://nodejs-server/./src/utils/redis/Cache/Cache.ts","webpack://nodejs-server/./src/utils/redis/cacheHelper.ts","webpack://nodejs-server/./src/utils/redis/redisClient.ts","webpack://nodejs-server/./src/utils/redis/redisHelper.ts","webpack://nodejs-server/./src/utils/redis/redisSubscriber.ts","webpack://nodejs-server/./src/utils/telegram.ts","webpack://nodejs-server/./src/utils/wildberries/consts.ts","webpack://nodejs-server/external commonjs \"@telegraf/session/redis\"","webpack://nodejs-server/external commonjs \"axios\"","webpack://nodejs-server/external commonjs \"body-parser\"","webpack://nodejs-server/external commonjs \"bull\"","webpack://nodejs-server/external commonjs \"express\"","webpack://nodejs-server/external commonjs \"form-data\"","webpack://nodejs-server/external commonjs \"php-serialize\"","webpack://nodejs-server/external commonjs \"playwright-cluster\"","webpack://nodejs-server/external commonjs \"redis\"","webpack://nodejs-server/external commonjs \"telegraf\"","webpack://nodejs-server/external commonjs \"telegraf/format\"","webpack://nodejs-server/external commonjs \"uuid\"","webpack://nodejs-server/external commonjs \"winston\"","webpack://nodejs-server/external node-commonjs \"fs\"","webpack://nodejs-server/external node-commonjs \"path\"","webpack://nodejs-server/external node-commonjs \"vm\"","webpack://nodejs-server/webpack/bootstrap","webpack://nodejs-server/webpack/runtime/compat get default export","webpack://nodejs-server/webpack/runtime/define property getters","webpack://nodejs-server/webpack/runtime/hasOwnProperty shorthand","webpack://nodejs-server/webpack/runtime/make namespace object","webpack://nodejs-server/./src/index.ts"],"sourcesContent":["// src/controllers/acceptanceController.ts\n\nimport fs from 'fs';\nimport path from 'path';\nimport axios, { AxiosResponse } from 'axios';\nimport {Request, RequestHandler, Response} from 'express';\nimport {solveTaskInNode, TaskInput, wasmPath} from '../utils/pow/solveTask';\n\n// Define Interfaces for Storage State\ninterface Cookie {\n    name: string;\n    value: string;\n}\n\ninterface LocalStorageItem {\n    name: string;\n    value: string;\n}\n\ninterface OriginData {\n    origin: string;\n    localStorage: LocalStorageItem[];\n}\n\ninterface StorageState {\n    cookies: Cookie[];\n    origins: OriginData[];\n}\n\n// Define Interfaces for Acceptance Costs Response\ninterface Coefficient {\n    coefficient: number;\n    // Add other properties if necessary\n}\n\ninterface AcceptanceCostsResult {\n    costs: Coefficient[];\n    // Add other properties if necessary\n}\n\ninterface AcceptanceCostsResponse {\n    result?: AcceptanceCostsResult;\n    // Add other properties if necessary\n}\n\n// Define Interfaces for Book Timeslot Response\ninterface BookTimeslotResult {\n    // Define the structure based on actual response\n    [key: string]: any;\n}\n\n// Define Interfaces for POW Task\ninterface PowTask {\n    // Define based on actual task structure\n    [key: string]: any;\n}\n\ninterface PowAnswer {\n    // Define based on actual answer structure\n    [key: string]: any;\n}\n\n// Helper function to wait\nconst wait = (ms: number): Promise<void> => new Promise(resolve => setTimeout(resolve, ms));\n\n// Ensure the functions are typed as RequestHandler\nexport const fetchTimeslots: RequestHandler = async (req: Request, res: Response): Promise<void> => {\n    const { userId, preorderId } = req.query;\n\n    if (!userId || !preorderId) {\n        res.status(400).json({ error: 'Missing userId or preorderId parameter.' });\n        return;\n    }\n\n    try {\n        // Path to the user's state.json\n        const statePath = path.join('/var/www/wb-back/storage/state', `${userId}.json`);\n\n        if (!fs.existsSync(statePath)) {\n            res.status(404).json({ error: 'User state not found.' });\n            return;\n        }\n\n        const storageState: StorageState = JSON.parse(fs.readFileSync(statePath, 'utf-8'));\n\n        // Extract cookies and WBTokenV3\n        const { cookies, origins } = storageState;\n        let cookieHeader = cookies.map(cookie => `${cookie.name}=${cookie.value}`).join('; ');\n\n        const originData = origins.find(origin => origin.origin === 'https://seller.wildberries.ru');\n        if (!originData) {\n            res.status(400).json({ error: 'Origin data not found in state.' });\n            return;\n        }\n\n        const wbTokenEntry = originData.localStorage.find(item => item.name === 'wb-eu-passport-v2.access-token');\n        const wbTokenValue = wbTokenEntry ? wbTokenEntry.value : null;\n\n        if (!wbTokenValue) {\n            res.status(400).json({ error: 'WBTokenV3 token not found in localStorage.' });\n            return;\n        }\n\n        // Add WBTokenV3 to cookies\n        cookieHeader += `; WBTokenV3=${wbTokenValue}`;\n\n        // Define headers\n        const headers = {\n            'Content-Type': 'application/json',\n            'Cookie': cookieHeader,\n            'Accept': '*/*',\n            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36',\n            'Origin': 'https://seller.wildberries.ru',\n            'Referer': 'https://seller.wildberries.ru/',\n            'Accept-Language': 'ru,en-GB;q=0.9,en-US;q=0.8,en;q=0.7',\n            'sec-ch-ua': '\"Chromium\";v=\"128\", \"Not;A=Brand\";v=\"24\", \"Google Chrome\";v=\"128\"',\n            'sec-ch-ua-mobile': '?0',\n            'sec-ch-ua-platform': '\"macOS\"',\n            'sec-fetch-dest': 'empty',\n            'sec-fetch-mode': 'cors',\n            'sec-fetch-site': 'same-site',\n        };\n\n        // **a. Get Acceptance Costs**\n        const acceptanceCostsUrl = 'https://seller-supply.wildberries.ru/ns/sm-supply/supply-manager/api/v1/supply/getAcceptanceCosts';\n        const dateFrom = new Date().toISOString();\n        const dateTo = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(); // 30 days from now\n        const acceptanceCostsData = {\n            \"params\": {\n                \"dateFrom\": dateFrom,\n                \"dateTo\": dateTo,\n                \"preorderID\": Number(preorderId)\n            },\n            \"jsonrpc\": \"2.0\",\n            \"id\": \"json-rpc_35\"\n        };\n\n        const acceptanceCostsResponse: AxiosResponse<AcceptanceCostsResponse> = await axios.post(acceptanceCostsUrl, acceptanceCostsData, { headers });\n        const acceptanceCostsResult = acceptanceCostsResponse.data?.result;\n\n        if (!acceptanceCostsResult) {\n            res.status(500).json({ error: 'Failed to retrieve acceptance costs.' });\n            return;\n        }\n\n        // Filter coefficients > -1\n        acceptanceCostsResult.costs = acceptanceCostsResult.costs.filter(coefficient => coefficient.coefficient > -1);\n\n        res.status(200).json({\n            message: 'Fetched acceptance costs and delivery date successfully.',\n            data: {\n                acceptanceCosts: acceptanceCostsResult,\n            }\n        });\n    } catch (error: any) {\n        console.error('Error fetching acceptance costs:', error.response ? error.response.data : error.message);\n        res.status(500).json({ error: 'Internal Server Error.' });\n    }\n};\n\nexport const bookTimeslot: RequestHandler = async (req: Request, res: Response): Promise<void> => {\n    const { userId, preorderId, deliveryDate, warehouseId, monopalletCount } = req.body;\n\n    if (!userId || !preorderId || !deliveryDate || !warehouseId) {\n        res.status(400).json({ error: 'Missing required parameters.' });\n        return;\n    }\n\n    try {\n        // Path to the user's state.json\n        const statePath = path.join('/var/www/wb-back/storage/state', `${userId}.json`);\n\n        if (!fs.existsSync(statePath)) {\n            res.status(404).json({ error: 'User state not found.' });\n            return;\n        }\n\n        const storageState: StorageState = JSON.parse(fs.readFileSync(statePath, 'utf-8'));\n\n        // Extract cookies and WBTokenV3\n        const { cookies, origins } = storageState;\n        let cookieHeader = cookies.map(cookie => `${cookie.name}=${cookie.value}`).join('; ');\n\n        const originData = origins.find(origin => origin.origin === 'https://seller.wildberries.ru');\n        if (!originData) {\n            res.status(400).json({ error: 'Origin data not found in state.' });\n            return;\n        }\n\n        const wbTokenEntry = originData.localStorage.find(item => item.name === 'wb-eu-passport-v2.access-token');\n        const wbTokenValue = wbTokenEntry ? wbTokenEntry.value : null;\n\n        if (!wbTokenValue) {\n            res.status(400).json({ error: 'WBTokenV3 token not found in localStorage.' });\n            return;\n        }\n\n        // Add WBTokenV3 to cookies\n        cookieHeader += `; WBTokenV3=${wbTokenValue}`;\n\n        // Define headers\n        const headers = {\n            'Content-Type': 'application/json',\n            'Cookie': cookieHeader,\n            'Accept': '*/*',\n            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36',\n            'Origin': 'https://seller.wildberries.ru',\n            'Referer': 'https://seller.wildberries.ru/',\n            'Accept-Language': 'ru,en-GB;q=0.9,en-US;q=0.8,en;q=0.7',\n            'sec-ch-ua': '\"Chromium\";v=\"128\", \"Not;A=Brand\";v=\"24\", \"Google Chrome\";v=\"128\"',\n            'sec-ch-ua-mobile': '?0',\n            'sec-ch-ua-platform': '\"macOS\"',\n            'sec-fetch-dest': 'empty',\n            'sec-fetch-mode': 'cors',\n            'sec-fetch-site': 'same-site',\n        };\n\n        // **d. Book Timeslot**\n        const bookTimeslotUrl = 'https://seller-supply.wildberries.ru/ns/sm/supply-manager/api/v1/plan/add';\n\n        const bookTimeslotData = {\n            \"params\": {\n                \"preOrderId\": Number(preorderId),\n                \"deliveryDate\": deliveryDate,\n                \"warehouseId\": warehouseId,\n                ...(monopalletCount !== undefined && { monopalletCount })  // Add monopalletCount if provided\n            },\n            \"jsonrpc\": \"2.0\",\n            \"id\": \"json-rpc_36\"\n        };\n\n        // **Perform CAPTCHA Solving**\n        const task: TaskInput = await getPowTask();\n\n        const startTime = Date.now();\n        const answers: PowAnswer[] = await solvePowTask(task);\n        const latency = (Date.now() - startTime).toFixed(3); // Latency in milliseconds\n\n        console.log('answers', answers);\n\n        const captchaToken: string = await verifyPowAnswer(task, answers);\n        console.log('captchaToken', captchaToken);\n\n        // Include the CAPTCHA token and latency in headers\n        const bookTimeslotHeaders = {\n            ...headers,\n            'x-wb-captcha-token': captchaToken,\n            'x-wb-captcha-latency': latency,\n        };\n\n        // Make the plan/add request with CAPTCHA headers\n        const bookTimeslotResponse: AxiosResponse<{ result: BookTimeslotResult }> = await axios.post(bookTimeslotUrl, bookTimeslotData, { headers: bookTimeslotHeaders });\n        const bookTimeslotResult = bookTimeslotResponse.data.result;\n\n        console.log('result', bookTimeslotResponse);\n        console.log('Book Timeslot Result:', bookTimeslotResult);\n\n        res.status(200).json({\n            message: 'Timeslot booked successfully.',\n            data: bookTimeslotResult\n        });\n    } catch (error: any) {\n        console.error('Error booking timeslot:', error.response ? error.response.data : error.message);\n        res.status(500).json({ error: 'Internal Server Error.' });\n    }\n};\n// Functions for CAPTCHA solving\n\n/**\n * Retrieves a POW task from the server.\n * @param clientId Optional client ID.\n * @returns The POW task.\n */\nexport const getPowTask = async (clientId: string | null = null): Promise<TaskInput> => {\n    const actualClientId = clientId || 'e150c635-c6bb-4192-8046-97c2cf81e8b8'; // Use the actual client_id if required\n    const getTaskUrl = `https://pow.wildberries.ru/api/v1/short/get-task?client_id=${actualClientId}`;\n\n    const response: AxiosResponse<TaskInput> = await axios.get(getTaskUrl, {\n        headers: {\n            'Content-Type': 'application/json;charset=UTF-8',\n            'Accept': '*/*',\n            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36',\n            'Origin': 'https://seller.wildberries.ru',\n            'Referer': 'https://seller.wildberries.ru/',\n            'sec-ch-ua': '\"Chromium\";v=\"128\", \"Not;A=Brand\";v=\"24\", \"Google Chrome\";v=\"128\"',\n            'sec-ch-ua-mobile': '?0',\n            'sec-ch-ua-platform': '\"macOS\"',\n            'sec-fetch-dest': 'empty',\n            'sec-fetch-mode': 'cors',\n            'sec-fetch-site': 'same-site',\n        },\n    });\n\n    return response.data;\n};\n\n/**\n * Solves the given POW task.\n * @param task The POW task to solve.\n * @returns An array of answers.\n */\nexport const solvePowTask = async (task:TaskInput): Promise<PowAnswer[]> => {\n    let resultArray: PowAnswer[] = [];\n    try {\n        const result = await solveTaskInNode(wasmPath, task);\n        resultArray = JSON.parse(result)?.answers;\n        console.log('solveTask result:', resultArray);\n    } catch (err) {\n        console.error('Error running solveTask:', err);\n    }\n    return resultArray;\n};\n\n/**\n * Verifies the POW answer with the server.\n * @param task The original POW task.\n * @param answers The answers to verify.\n * @returns The CAPTCHA token.\n */\nexport const verifyPowAnswer = async (task:TaskInput, answers: PowAnswer[]): Promise<string> => {\n    const verifyUrl = 'https://pow.wildberries.ru/api/v1/short/verify-answer';\n\n    const data = {\n        task,\n        answers,\n    };\n\n    console.log('data', data);\n\n    const response: AxiosResponse<{ 'wb-captcha-short-token': string }> = await axios.post(verifyUrl, JSON.stringify(data), {\n        headers: {\n            'Content-Type': 'application/json;charset=UTF-8',\n            'Accept': '*/*',\n            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36',\n            'Origin': 'https://seller.wildberries.ru',\n            'Referer': 'https://seller.wildberries.ru/',\n            'sec-ch-ua': '\"Chromium\";v=\"128\", \"Not;A=Brand\";v=\"24\", \"Google Chrome\";v=\"128\"',\n            'sec-ch-ua-mobile': '?0',\n            'sec-ch-ua-platform': '\"macOS\"',\n            'sec-fetch-dest': 'empty',\n            'sec-fetch-mode': 'cors',\n            'sec-fetch-site': 'same-site',\n        },\n    });\n\n    return response.data['wb-captcha-short-token'];\n};\n","import {Request, RequestHandler, Response} from 'express';\nimport { initializeCluster } from '../utils/clusterManager';\nimport fs from 'fs';\nimport path from 'path';\nimport { sendMessageToTelegram } from '../utils/telegram';\nimport { getPowTask, solvePowTask, verifyPowAnswer } from './acceptanceController';\nimport { waitForVerificationCode } from '../utils/redis/redisHelper';\nimport { setCacheValue } from '../utils/redis/cacheHelper';\nimport axios, { AxiosResponse } from 'axios';\nimport { Page, BrowserContext } from 'playwright';\nimport {TaskInput} from \"../utils/pow/solveTask\";\n\n// Define Interfaces for Request Bodies and Other Structures\n\ninterface Credentials {\n    phone: string;\n    // Add other credential fields if necessary\n}\n\ninterface AuthenticateUserRequestBody {\n    userId: string;\n    credentials: Credentials;\n    telegramId: string;\n    headless?: boolean;\n}\n\ninterface AuthenticationResult {\n    success: boolean;\n    statePath?: string;\n    error?: string;\n}\n\ninterface PowTask {\n    // Define based on actual task structure\n    [key: string]: any;\n}\n\ninterface PowAnswer {\n    // Define based on actual answer structure\n    [key: string]: any;\n}\n\n// Exported Functions\n\n/**\n * Authenticates a user by automating the login process, handling CAPTCHA, and verification codes.\n * Expects a JSON body: { userId, credentials, telegramId, headless }\n */\nexport const authenticateUser: RequestHandler = async (req: Request, res: Response): Promise<void> => {\n    const { userId, telegramId, credentials, headless } = req.body as AuthenticateUserRequestBody;\n\n    if (!userId || !credentials || !telegramId || !credentials.phone) {\n        res.status(400).json({ error: 'Missing userId, telegramId, or credentials.' });\n        return\n    }\n\n    // Respond to Laravel immediately\n    res.status(202).json({ message: 'Authentication job started.' });\n\n    try {\n        // Initialize the cluster\n        const cluster = await initializeCluster();\n\n        // Define the task for authentication\n        await cluster.execute(\n            {\n                userId,\n                telegramId,\n                credentials,\n                headless: headless !== undefined ? headless : true,\n            },\n            async ({ page, data }): Promise<void> => {\n            const { userId, telegramId, credentials, headless } = data as AuthenticateUserRequestBody;\n            let context: BrowserContext | undefined;\n\n            // Set custom headers\n            const customHeaders = {\n                'Content-Type': 'application/json;charset=UTF-8',\n                Accept: '*/*',\n                'User-Agent':\n                    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) ' +\n                    'AppleWebKit/537.36 (KHTML, like Gecko) ' +\n                    'Chrome/128.0.0.0 Safari/537.36',\n                Origin: 'https://seller.wildberries.ru',\n                Referer: 'https://seller.wildberries.ru/',\n            };\n\n            try {\n                // Apply custom headers to the context\n                context = await page.context();\n                await context.setExtraHTTPHeaders({\n                    'Content-Type': customHeaders['Content-Type'],\n                    Accept: customHeaders['Accept'],\n                    Origin: customHeaders['Origin'],\n                    Referer: customHeaders['Referer'],\n                });\n\n                await page.setViewportSize({ width: 1920, height: 1080 });\n\n                // Enhanced logging for debugging\n                page.on('console', (msg) => console.log('PAGE LOG:', msg.text()));\n                page.on('request', (request) => {\n                    if (request.url().includes('/auth/v2/auth')) {\n                        console.log(\n                            'Auth Request:',\n                            request.method(),\n                            request.url(),\n                            request.headers(),\n                            request.postData()\n                        );\n                    }\n                });\n                page.on('response', (response) => {\n                    if (response.url().includes('/auth/v2/auth')) {\n                        console.log('Auth Response:', response.status(), response.url(), response.statusText());\n                    }\n                });\n\n                // Intercept and modify auth requests\n                await page.route('**/auth/v2/auth', async (route) => {\n                    const request = route.request();\n\n                    if (request.method() === 'POST') {\n                        const headers = {\n                            ...request.headers(),\n                            'Content-Type': 'application/json',\n                        };\n\n                        console.log('Original Headers:', request.headers());\n                        console.log('Modified Headers:', headers);\n\n                        await route.continue({\n                            headers: headers,\n                        });\n                    } else {\n                        await route.continue();\n                    }\n                });\n\n                // Navigate to the login page\n                await page.goto('https://seller-auth.wildberries.ru/');\n                console.log('Navigated to the login page.');\n\n                // Interact with the login form\n                await page.locator('div').filter({ hasText: /^\\+7$/ }).nth(2).click();\n                await page.getByTestId('phone-input').click();\n                await page.getByTestId('phone-input').fill(credentials.phone);\n                console.log('Filled phone number into the form.');\n\n                // Wait 1 second\n                await page.waitForTimeout(1000);\n\n                // Handle CAPTCHA solving\n                const captchaResult = await handleCaptcha(page, telegramId);\n                if (!captchaResult) {\n                    throw new Error('Failed to handle CAPTCHA.');\n                }\n\n                // Ask user for the verification code via Telegram\n                const codeResult = await askUserForCode(page, telegramId);\n                if (!codeResult) {\n                    throw new Error('Failed to submit verification code.');\n                }\n\n                console.log('Successfully authenticated the user. Going to the Seller Portal...');\n                await page.goto('https://seller.wildberries.ru/');\n                await page.waitForLoadState('networkidle');\n                await page.getByTestId('menu.section.supply-management-button-link');\n                console.log('Check for specific cookie');\n\n                // Wait for the 'x-supplier-id' cookie to be set\n                const maxRetries = 20; // You can adjust this based on the expected time\n                let retries = 0;\n                let supplierIdCookie: { name: string; value: string } | undefined = undefined;\n\n                while (retries < maxRetries) {\n                    const cookies = await context.cookies();\n                    supplierIdCookie = cookies.find((cookie) => cookie.name === 'x-supplier-id');\n\n                    if (supplierIdCookie) {\n                        console.log('x-supplier-id cookie is set:', supplierIdCookie);\n                        break; // Cookie is found, proceed with saving the session\n                    }\n\n                    // Wait 500ms before checking again\n                    await page.waitForTimeout(500);\n                    retries += 1;\n                }\n\n                if (!supplierIdCookie) {\n                    throw new Error('x-supplier-id cookie was not set in the expected time frame.');\n                }\n\n                console.log('Navigated to the Seller Portal. Waiting for the page to load...');\n                console.log('Saving cookies...');\n                // Save the authenticated state to state.json\n                const storageState = await context.storageState();\n                const statePath = path.join('/var/www/wb-back/storage/state', `${userId}.json`);\n                fs.writeFileSync(statePath, JSON.stringify(storageState, null, 2));\n\n                console.log(`Authentication state saved to ${statePath}`);\n\n                // Store success in Redis cache using setCacheValue and return path to Laravel state\n                await setCacheValue(\n                    `auth_state_${userId}`,\n                    {\n                        success: true,\n                        statePath,\n                    },\n                    3600\n                );\n\n                await notifyLaravel(userId, 'Успешно', { statePath });\n\n                console.log(`Authentication job for user ${userId} completed.`);\n            } catch (error: any) {\n                console.error(`Error during authentication process: ${error.message}`);\n                // Store failure in Redis cache using setCacheValue\n                await setCacheValue(\n                    `auth_state_${userId}`,\n                    {\n                        success: false,\n                        error: error.message,\n                    },\n                    3600\n                );\n                await notifyLaravel(userId, 'Ошибка', { error: error.message });\n            } finally {\n                // Ensure that the context is properly closed after the task finishes\n                if (context) {\n                    await context.close(); // This will close the context and the associated pages\n                    console.log('Browser context closed.');\n                }\n            }\n        }\n    );\n\n    } catch (error: any) {\n        console.error('Exception occurred during authentication:', error.message);\n        res.status(500).json({ error: 'Internal server error.' });\n        return;\n    }\n};\n\n/**\n * Asks the user for the verification code via Telegram.\n * @param {Page} page - Playwright page instance.\n * @param {string} telegramId - Telegram ID for communication.\n * @returns {Promise<boolean>} - Returns true if code submission is successful, else false.\n */\nconst askUserForCode = async (page: Page, telegramId: string): Promise<boolean> => {\n    // Set action in cache\n    await setCacheValue(`session_${telegramId}`, { action: 'collect_verification_code' }, 300);\n\n    // Send a Telegram message requesting the verification code\n    const messageSent = await sendMessageToTelegram(\n        'Пожалуйста, введите код подтверждения для входа в Wildberries Seller Portal.',\n        telegramId\n    );\n    if (!messageSent) {\n        return false;\n    }\n\n    // Wait for the verification code from Redis\n    console.log('Waiting for verification code from Redis...');\n    let verificationCode: string;\n    try {\n        verificationCode = await waitForVerificationCode(telegramId);\n        console.log(`Received verification code: ${verificationCode}`);\n    } catch (error) {\n        return false;\n    }\n\n    // Validate the verification code (ensure it's 6 digits)\n    if (!/^\\d{6}$/.test(verificationCode)) {\n        return false;\n    }\n\n    // Fill the verification code into the form\n    const digits = verificationCode;\n    await page.locator('.InputCell-PB5beCCt55').first().fill(digits[0]);\n    await page.locator('li:nth-child(2) > .InputCell-PB5beCCt55').fill(digits[1]);\n    await page.locator('li:nth-child(3) > .InputCell-PB5beCCt55').fill(digits[2]);\n    await page.locator('li:nth-child(4) > .InputCell-PB5beCCt55').fill(digits[3]);\n    await page.locator('li:nth-child(5) > .InputCell-PB5beCCt55').fill(digits[4]);\n    await page.locator('li:nth-child(6) > .InputCell-PB5beCCt55').fill(digits[5]);\n\n    console.log('Filled verification code into the form.');\n\n    // Submit the verification code\n    console.log('Submitting the verification code...');\n    const codeResult = await submitCode('captchaSolution', verificationCode, page, telegramId);\n    return codeResult;\n};\n\nconst authApiUrl = 'https://seller-auth.wildberries.ru/auth/v2/auth';\nconst maxRetries = 3;\nlet retries = 0;\n\n/**\n * Submits the verification code to the authentication API.\n * @param {string} captchaSolution - The CAPTCHA solution identifier.\n * @param {string} code - The verification code entered by the user.\n * @param {Page} page - Playwright page instance.\n * @param {string} telegramId - Telegram ID for communication.\n * @returns {Promise<boolean>} - Returns true if submission is successful, else false.\n */\nconst submitCode = async (\n    captchaSolution: string,\n    code: string,\n    page: Page,\n    telegramId: string\n): Promise<boolean> => {\n    console.log('Submitting the verification code:', code);\n    console.log('retry', retries, 'maxRetries', maxRetries);\n    while (retries < maxRetries) {\n        // Wait for the API response\n        const response = await page.waitForResponse((response) =>\n            response.url().includes(authApiUrl)\n        );\n\n        // Parse the response JSON\n        const responseBody = await response.json();\n        console.log('Auth API response:', responseBody);\n\n        // Check if the response has \"mismatch code\" error\n        if (responseBody.result === 6 || responseBody.error === 'mismatch code') {\n            console.error('Code mismatch, prompting the user to try again.');\n\n            retries += 1;\n\n            if (retries >= maxRetries) {\n                console.error('Maximum retries reached, exiting.');\n                await sendMessageToTelegram(\n                    'Превышено количество попыток ввода кода. Попробуйте позже.',\n                    telegramId\n                );\n                break;\n            }\n\n            await sendMessageToTelegram('Неверный код. Попробуйте еще раз.', telegramId);\n\n            console.log(`Retrying code submission (Attempt ${retries}/${maxRetries})...`);\n\n            const newCodeResult = await askUserForCode(page, telegramId);\n            if (newCodeResult) {\n                return true;\n            }\n        } else {\n            // Success case or unexpected response\n            console.log('Code submission successful:', responseBody);\n            return true;\n        }\n    }\n    return false;\n};\n\n/**\n * Notifies the Laravel application about the authentication status.\n * @param {string} userId - The ID of the user.\n * @param {string} status - The status of the authentication ('Успешно' or 'Ошибка').\n * @param {object} payload - Additional data to send.\n */\nconst notifyLaravel = async (userId: string, status: string, payload: object): Promise<void> => {\n    try {\n        await axios.post('http://webserver/webhook/auth-completed', {\n            userId,\n            status,\n            payload,\n        });\n    } catch (error: any) {\n        console.error('Failed to notify Laravel:', error.message);\n    }\n};\n\n/**\n * Handles CAPTCHA solving during the authentication process.\n * @param {Page} page - Playwright page instance.\n * @param telegramId\n * @returns {Promise<boolean>} - Returns true if CAPTCHA is handled successfully, else false.\n */\nconst handleCaptcha = async (page: Page, telegramId: string): Promise<boolean> => {\n    // Wait for the window.CAPTCHA_CLIENT_ID to be defined\n    await page.waitForFunction(() => (window as any).CAPTCHA_CLIENT_ID !== undefined);\n\n    // Retrieve the value of window.CAPTCHA_CLIENT_ID\n    const captchaClientId: string = await page.evaluate(() => (window as any).CAPTCHA_CLIENT_ID);\n    console.log('CAPTCHA client ID:', captchaClientId);\n\n    // Perform CAPTCHA Solving\n    const task: TaskInput = await getPowTask(captchaClientId);\n\n    const startTime = Date.now();\n    const answers: PowAnswer[] = await solvePowTask(task);\n\n    console.log('answers', answers);\n\n    const captchaToken: string = await verifyPowAnswer(task, answers);\n    console.log('captchaToken', captchaToken);\n\n    // Define your known captcha_token\n    const knownCaptchaToken = captchaToken;\n    // Example: '1727347696|76cdbc0609b845fab0b31a5f3f1a346a|d71150af502218593a67fd916cb174c4f48c35d1dabfb38ef4d00d088fb9806b'\n\n    // Intercept the POST request to the wb-captcha endpoint\n    await page.route('**/auth/v2/code/wb-captcha', async (route) => {\n        console.log('Intercepted CAPTCHA inside! request:', route.request().url());\n        const request = route.request();\n\n        if (request.method() === 'POST') {\n            // Parse the existing request payload\n            let postData: any;\n            try {\n                postData = await request.postDataJSON();\n            } catch (error) {\n                console.error('Failed to parse POST data:', error);\n                return route.abort();\n            }\n\n            // Inject the known captcha_token\n            postData.captcha_token = knownCaptchaToken;\n\n            // Continue the request with the modified payload\n            await route.continue({\n                postData: JSON.stringify(postData),\n                headers: {\n                    ...request.headers(),\n                    'Content-Type': 'application/json', // Ensure the content type is correct\n                },\n            });\n        } else {\n            // For non-POST requests, continue without modification\n            await route.continue();\n        }\n    });\n\n    const captchaApiUrl = 'https://seller-auth.wildberries.ru/auth/v2/code/wb-captcha';\n\n    // Trigger the API request (e.g., submitting the phone number form)\n    await page.getByTestId('submit-phone-button').click();\n\n    // Wait for the specific API response\n    const response: any = await page.waitForResponse((response) =>\n        response.url().includes(captchaApiUrl) && response.status() === 200\n    );\n\n    // Parse the response JSON\n    const responseBody = await response.json();\n\n    if (responseBody.result === 4) {\n        console.error('Captcha required:', responseBody);\n        await sendMessageToTelegram(\n            'Wildberries заблокировал вас на 3 часа. Попробуйте позже.',\n            telegramId\n        );\n        // Handle CAPTCHA workflow (e.g., ask the user to solve the CAPTCHA)\n        // You can also store or process any additional data from `responseBody.payload`\n        return false;\n    } else if (responseBody.result === 3) {\n        console.log('Process result:', responseBody.result);\n        // CAPTCHA required, wait for captcha response\n        const verifyAnswerUrl = 'https://pow.wildberries.ru/api/v1/short/verify-answer';\n        const getTaskUrl = 'https://pow.wildberries.ru/api/v1/short/get-task';\n\n        // Wait for the get-task API response\n        const responseTask: any = await page.waitForResponse((response) =>\n            response.url().includes(getTaskUrl)\n        );\n        const responseBodyTask = await responseTask.json();\n        console.log('Received response from get-task API:', responseBodyTask);\n\n        // Wait for the verify-answer API response\n        const responsePow: any = await page.waitForResponse((response) =>\n            response.url().includes(verifyAnswerUrl)\n        );\n        const responseBodyPow = await responsePow.json();\n        console.log('Received response from verify-answer API:', responseBodyPow);\n        return true;\n    } else if (responseBody.result === 0) {\n        console.log('Process result:', responseBody.result);\n        // CAPTCHA not required\n        return true;\n    } else {\n        // Success case or unexpected response\n        console.log('Unexpected response:', responseBody);\n        await sendMessageToTelegram(\n            `Ошибка: ${responseBody.error ?? 'Неизвестная ошибка'}`,\n            telegramId\n        );\n        return false;\n    }\n};","// nodejs-server/controllers/draftsController.ts\n\nimport {Request, RequestHandler, Response} from 'express';\nimport fs from 'fs';\nimport path from 'path';\nimport axios, { AxiosResponse } from 'axios';\nimport {getDraftsForUser} from \"../services/wildberriesService\";\n\n// Define Interfaces for Storage State\ninterface Cookie {\n    name: string;\n    value: string;\n}\n\ninterface LocalStorageItem {\n    name: string;\n    value: string;\n}\n\ninterface OriginData {\n    origin: string;\n    localStorage: LocalStorageItem[];\n}\n\ninterface StorageState {\n    cookies: Cookie[];\n    origins: OriginData[];\n}\n\n// Define Interfaces for Drafts Response\ninterface Draft {\n    createdAt: string;\n    updatedAt: string;\n    barcodeQuantity: number;\n    goodQuantity: number;\n    author: string;\n    ID: string;\n}\n\ninterface DraftsResult {\n    drafts: Draft[];\n}\n\ninterface DraftsApiResponse {\n    result: DraftsResult;\n}\n\n// Define Interface for Row Data\ninterface RowData {\n    createdAt: string;\n    updatedAt: string;\n    barcodeQuantity: string;\n    goodQuantity: string;\n    author: string;\n    draftId: string;\n    url: string;\n}\n\n/**\n * List Drafts Endpoint\n * Expects a query parameter: userId\n */\nexport const listDrafts:RequestHandler = async (req: Request, res: Response): Promise<void> => {\n    const { userId } = req.query;\n\n    if (!userId || typeof userId !== 'string') {\n        res.status(400).json({ error: 'Missing or invalid userId parameter.' });\n        return\n    }\n\n    try {\n        const drafts = await getDraftsForUser(userId);\n        res.status(200).json({\n            message: `Found ${drafts.length} drafts with barcodeQuantity > 0.`,\n            data: drafts,\n        });\n        return\n    } catch (error: any) {\n        console.error('Error fetching drafts data:', error.message);\n        res.status(500).json({ error: 'Internal Server Error.' });\n        return\n    }\n};\n","// nodejs-server/controllers/ordersController.ts\n\nimport { Request, Response } from 'express';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport axios, { AxiosResponse } from 'axios';\nimport {createOrderRequest} from \"../services/wildberriesService\";\n\n/**\n * Interfaces for the storage state structure.\n */\ninterface Cookie {\n    name: string;\n    value: string;\n}\n\ninterface LocalStorageItem {\n    name: string;\n    value: string;\n}\n\ninterface OriginData {\n    origin: string;\n    localStorage: LocalStorageItem[];\n}\n\ninterface StorageState {\n    cookies: Cookie[];\n    origins: OriginData[];\n}\n\ninterface CreateSupplyResult {\n    result?: {\n        ids: { Id: string }[];\n    };\n}\n\ninterface RecommendationsResult {\n    warehouses: Warehouse[];\n}\n\ninterface Warehouse {\n    isActive: boolean;\n    // Add other relevant properties as needed\n}\n\n/**\n * Handler to create an order.\n * Expects a JSON body: { userId, draftId, warehouseId, boxTypeMask }\n */\nexport const createOrder = async (req: Request, res: Response): Promise<void> => {\n    const { userId, draftId, warehouseId, boxTypeMask } = req.body;\n\n    // Validate request body\n    if (!userId || !draftId || !warehouseId || !boxTypeMask) {\n        res.status(400).json({ error: 'Missing userId, draftId, warehouseId, or boxTypeMask in request body.' });\n        return;\n    }\n\n    try {\n        const response = await createOrderRequest(userId, draftId, warehouseId, boxTypeMask);\n\n        // Respond with success and the preorderID\n        res.status(200).json({\n            message: 'Order created successfully.',\n            preorderID: response.preorderID,\n        });\n    } catch (error: any) {\n        console.error('Error during order creation:', error.message);\n        res.status(500).json({ error: 'Internal Server Error.' });\n    }\n};\n\n/**\n * Handler to list warehouses.\n * Expects query parameters: { userId, draftId }\n */\nexport const listWarehouses = async (req: Request, res: Response): Promise<void> => {\n    const { userId, draftId } = req.query;\n\n    // Validate query parameters\n    if (typeof userId !== 'string' || typeof draftId !== 'string') {\n        res.status(400).json({ error: 'Missing or invalid userId or draftId in query parameters.' });\n        return;\n    }\n\n    try {\n        // Construct the path to the user's state.json\n        const statePath = path.join('/var/www/wb-back/storage/state', `${userId}.json`);\n\n        // Check if the state file exists\n        if (!fs.existsSync(statePath)) {\n            res.status(404).json({ error: 'User state not found.' });\n            return;\n        }\n\n        // Read and parse the storage state\n        const storageStateRaw = fs.readFileSync(statePath, 'utf-8');\n        const storageState: StorageState = JSON.parse(storageStateRaw);\n\n        // Extract cookies and construct the Cookie header\n        const cookies = storageState.cookies;\n        let cookieHeader = cookies.map(cookie => `${cookie.name}=${cookie.value}`).join('; ');\n\n        // Find origin data for Wildberries seller\n        const originData = storageState.origins.find(origin => origin.origin === 'https://seller.wildberries.ru');\n        if (!originData) {\n            res.status(400).json({ error: 'Origin data not found in state.' });\n            return;\n        }\n\n        // Retrieve WBTokenV3 from localStorage\n        const wbTokenEntry = originData.localStorage.find(item => item.name === 'wb-eu-passport-v2.access-token');\n        const wbTokenValue = wbTokenEntry ? wbTokenEntry.value : null;\n\n        if (!wbTokenValue) {\n            res.status(400).json({ error: 'WBTokenV3 token not found in localStorage.' });\n            return;\n        }\n\n        // Append WBTokenV3 to the Cookie header\n        cookieHeader += `; WBTokenV3=${wbTokenValue}`;\n\n        // Define HTTP headers for the request\n        const headers = {\n            'Content-Type': 'application/json',\n            'Cookie': cookieHeader,\n            'Accept': '*/*',\n            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36',\n            'Origin': 'https://seller.wildberries.ru',\n            'Referer': 'https://seller.wildberries.ru/',\n            'Accept-Language': 'ru,en-GB;q=0.9,en-US;q=0.8,en;q=0.7',\n            'sec-ch-ua': '\"Chromium\";v=\"128\", \"Not;A=Brand\";v=\"24\", \"Google Chrome\";v=\"128\"',\n        };\n\n        // **a. Get Warehouse Recommendations**\n        const recommendationsUrl = 'https://seller-supply.wildberries.ru/ns/sm-recommendations/supply-manager/api/v1/recommendations/getRecommendationsForWarehouses';\n        const recommendationsData = {\n            params: {\n                draftId: draftId\n            },\n            jsonrpc: \"2.0\",\n            id: \"json-rpc_20\"\n        };\n\n        // Make the POST request to get warehouse recommendations\n        const recommendationsResponse: AxiosResponse<{ result: RecommendationsResult }> = await axios.post(recommendationsUrl, recommendationsData, { headers });\n        const recommendationsResult = recommendationsResponse.data.result;\n\n        // Filter active warehouses\n        const activeWarehouses = recommendationsResult.warehouses.filter(warehouse => warehouse.isActive);\n        if (activeWarehouses.length === 0) {\n            res.status(400).json({ error: 'No active warehouses available.' });\n            return;\n        }\n\n        // Respond with the list of active warehouses\n        res.status(200).json({\n            message: 'Warehouses fetched successfully.',\n            warehouses: activeWarehouses,\n        });\n    } catch (error: any) {\n        console.error('Error during warehouse fetch:', error.message);\n        res.status(500).json({ error: 'Internal Server Error.' });\n    }\n};\n","// acceptance.ts\nimport { Router } from 'express';\nimport * as acceptanceController from '../controllers/acceptanceController';\n\nconst router: Router = Router();\n\n/**\n * @route   GET /api/acceptance/fetchTimeslots\n * @desc    Fetch available timeslots\n * @query   userId: string\n *          preorderId: string\n */\nrouter.get('/fetchTimeslots', acceptanceController.fetchTimeslots);\n\n/**\n * @route   POST /api/acceptance/bookTimeslot\n * @desc    Book a specific timeslot\n * @body    userId: string\n *          preorderId: string\n *          timeslotId: string\n */\nrouter.post('/bookTimeslot', acceptanceController.bookTimeslot);\n\nexport default router;","// nodejs-server/routes/authRoutes.ts\n\nimport { Router } from 'express';\nimport * as authController from '../controllers/authController';\n\nconst router: Router = Router();\n\n// POST /api/auth/authenticate\nrouter.post('/authenticate', authController.authenticateUser);\n\nexport default router;\n","import { Router } from 'express';\nimport * as draftsController from '../controllers/draftsController';\n\nconst router: Router = Router();\n\n// GET /api/drafts/list\nrouter.get('/list', draftsController.listDrafts);\n\nexport default router;\n","// nodejs-server/routes/ordersRoutes.ts\n\nimport { Router } from 'express';\nimport * as ordersController from '../controllers/ordersController';\n\nconst router: Router = Router();\n\n// POST /api/orders/create\nrouter.post('/create', ordersController.createOrder);\n\n// GET /api/orders/warehouses\nrouter.get('/warehouses', ordersController.listWarehouses);\n\nexport default router;\n","import wildberriesSuppliesApi from './wildberriesSuppliesApi';\n\nclass WarehouseService {\n    async getWarehouses(page = 1) {\n        const warehouses = await wildberriesSuppliesApi.getWarehouses();\n\n        // Define the prioritized warehouses in the desired order\n        const prioritizedWarehouses = [\n            { name: 'Коледино', id: 507 },\n            { name: 'Электросталь', id: 120762 },\n            { name: 'Подольск', id: 117501 },\n            { name: 'Подольск 3', id: 218623 },\n            { name: 'Подольск 4', id: 301229 },\n            { name: 'Кузнецк', id: 302335 },\n            { name: 'Казань', id: 117986 },\n            { name: 'Краснодар (Тихорецкая)', id: 130744 },\n            { name: 'Тула', id: 206348 },\n            { name: 'Белые Столбы', id: 206236 },\n            { name: 'Невинномысск', id: 208277 },\n            { name: 'Екатеринбург - Испытателей 14г', id: 1733 },\n            { name: 'Екатеринбург - Перспективный 12/2', id: 300571 },\n            { name: 'Новосибирск', id: 686 },\n            { name: 'Чашниково', id: 321932 },\n            { name: 'Рязань (Тюшевское)', id: 301760 },\n        ];\n\n        // Separate and sort prioritized warehouses\n        const prioritizedList = [];\n        const otherWarehouses = [];\n\n        for (const pWarehouse of prioritizedWarehouses) {\n            for (const warehouse of warehouses) {\n                if (warehouse.ID === pWarehouse.id && warehouse.name === pWarehouse.name) {\n                    prioritizedList.push(warehouse);\n                    break;\n                }\n            }\n        }\n\n        for (const warehouse of warehouses) {\n            if (!prioritizedList.some(p => p.ID === warehouse.ID)) {\n                otherWarehouses.push(warehouse);\n            }\n        }\n\n        // Merge prioritized warehouses with the rest\n        const sortedWarehouses = [...prioritizedList, ...otherWarehouses];\n\n        // Paginate warehouses\n        const perPage = 20;\n        const totalPages = Math.ceil(sortedWarehouses.length / perPage);\n        page = Math.max(1, Math.min(totalPages, page));\n        const start = (page - 1) * perPage;\n        const currentWarehouses = sortedWarehouses.slice(start, start + perPage);\n\n        // Prepare response data for Telegram in two columns\n        const keyboardButtons = [];\n        for (let i = 0; i < currentWarehouses.length; i += 2) {\n            const row = [\n                {\n                    text: currentWarehouses[i].name,\n                    callback_data: `select_warehouse_${currentWarehouses[i].ID}`\n                }\n            ];\n            if (i + 1 < currentWarehouses.length) {\n                row.push({\n                    text: currentWarehouses[i + 1].name,\n                    callback_data: `select_warehouse_${currentWarehouses[i + 1].ID}`\n                });\n            }\n            keyboardButtons.push(row);\n        }\n\n        // Add navigation buttons\n        const navigationButtons = [];\n        if (page > 1) {\n            navigationButtons.push({ text: '← Назад', callback_data: `warehouses_prev` });\n        }\n        if (page < totalPages) {\n            navigationButtons.push({ text: 'Вперед →', callback_data: `warehouses_next` });\n        }\n        if (navigationButtons.length) {\n            keyboardButtons.push(navigationButtons);\n        }\n\n        const message = 'Выберите склад:'; // Пока не используется, но может пригодиться в будущем\n\n        return {\n            message,\n            keyboard: keyboardButtons\n        };\n    }\n}\n\nexport default new WarehouseService();\n","// src/services/authService.ts\nimport { authQueue } from './jobQueue';\n\nexport interface AuthenticateUserRequestBody {\n    userId: string;\n    telegramId: string;\n    credentials: {\n        statePath?: any;\n        phone: string;\n        name?: string;\n    };\n    headless?: boolean;\n}\n\nexport interface AuthServiceResult {\n    success: boolean;\n    message: string;\n}\n\n// Service function to enqueue authentication job\nexport const authenticateUserService = async (\n    data: AuthenticateUserRequestBody\n): Promise<AuthServiceResult> => {\n    const { userId, telegramId, credentials, headless } = data;\n\n    if (!userId || !credentials || !telegramId || !credentials.phone) {\n        return { success: false, message: 'Missing userId, telegramId, or credentials.' };\n    }\n\n    try {\n        // Add the job to the Bull queue\n        await authQueue.add(data, {\n            backoff: 5000, // Wait 5 seconds before retrying\n            removeOnComplete: true, // Remove job from queue on completion\n            removeOnFail: true, // Remove failed jobs for inspection\n        });\n\n        return { success: true, message: 'Authentication job enqueued.' };\n    } catch (error: any) {\n        console.error('Failed to enqueue authentication job:', error.message);\n        return { success: false, message: 'Failed to enqueue authentication job.' };\n    }\n};\n","// src/services/jobQueue.ts\nimport Bull from 'bull';\nimport { AuthenticateUserRequestBody } from './authService';\n\n// Initialize Bull queue for authentication jobs\nexport const authQueue = new Bull<AuthenticateUserRequestBody>('authentication', {\n    redis: {\n        host: 'redis', // Update with your Redis host\n        port: 6379,        // Update with your Redis port\n    },\n});\n","// src/services/UserService.ts\n\nimport axios from 'axios';\nimport CacheService from '../utils/redis/Cache/Cache';\nimport  {User, CreateCabinetResponse}  from '../telegraf/types/User';\nimport {PaginatedNotifications} from \"../telegraf/types/Notification\";\n\nclass LaravelService {\n    private laravelApiUrl: string;\n\n    constructor() {\n        const apiUrl = process.env.LARAVEL_API_URL;\n        if (!apiUrl) {\n            throw new Error('LARAVEL_API_URL is not defined in environment variables.');\n        }\n        this.laravelApiUrl = apiUrl;\n    }\n\n    /**\n     * Retrieves a user by their Telegram ID.\n     * Utilizes CacheService.rememberCacheValue for caching.\n     *\n     * @param telegramId - The Telegram ID of the user.\n     * @returns A Promise that resolves to the User object or null if not found.\n     */\n    public async getUserByTelegramId(telegramId: number): Promise<User | null> {\n        const cacheKey = `user_telegram_id_${telegramId}`;\n        try {\n            const user: User | null = await CacheService.rememberCacheValue(\n                cacheKey,\n                () => this.fetchUserFromApi(telegramId),\n                3600 // Cache expiration set to 1 hour (3600 seconds)\n            );\n            console.log(`User fetched for Telegram ID ${telegramId}:`, user);\n            return user;\n        } catch (error) {\n            console.error('Error fetching user:', error);\n            return null;\n        }\n    }\n\n    /**\n     * Retrieves paginated notifications for a user by their Telegram ID.\n     *\n     * @param telegramId - The Telegram ID of the user.\n     * @param page - The page number to retrieve.\n     * @param perPage - Number of notifications per page.\n     * @param type - Either 'search' or 'booking'.\n     * @returns A Promise that resolves to PaginatedNotifications or null if not found.\n     */\n    public async getNotificationsByTelegramId(\n        telegramId: number,\n        page: number = 1,\n        perPage: number = 1,\n        type: string = 'search'\n    ): Promise<PaginatedNotifications | null> {\n        const cacheKey = `notifications_telegram_id_${telegramId}_page_${page}`;\n        try {\n            const notifications: PaginatedNotifications | null = await CacheService.rememberCacheValue(\n                cacheKey,\n                () => this.fetchNotificationsFromApi(telegramId, page, perPage, type),\n                60 // Cache expiration set to 2 hours (7200 seconds)\n            );\n            return notifications;\n        } catch (error) {\n            console.error('Error fetching notifications:', error);\n            return null;\n        }\n    }\n\n    public async createNotificationByTelegramId(\n        telegramId: number,\n        settings: any,\n    ): Promise<PaginatedNotifications | null> {\n        try {\n            const response = await axios.post<PaginatedNotifications>(\n                `${this.laravelApiUrl}/notifications/telegram/${telegramId}`,\n                {\n                    settings\n                }\n            );\n            return response.data;\n        } catch (error) {\n            console.error('Error creating notification:', error);\n            throw new Error('Error creating notification');\n        }\n    }\n\n    /**\n     * Creates a cabinet for a user identified by their Telegram ID.\n     * Utilizes caching to store and update the user data.\n     *\n     * @param telegramId - The Telegram ID of the user.\n     * @param name - The name of the cabinet to be created.\n     * @param phoneNumber - The phone number associated with the cabinet.\n     * @param userId\n     * @param statePath\n     * @returns A Promise that resolves to the updated User object or null if an error occurs.\n     */\n    public async createCabinetByTelegramId(\n        telegramId: number,\n        name: string,\n        phoneNumber: string,\n        userId: string,\n        statePath: string,\n    ): Promise<User | null> {\n\n        const cacheKey = `user_new_cabinet_${telegramId}`;\n\n        try {\n            // Prepare the payload for the POST request\n            const payload = {\n                name,\n                phone_number: phoneNumber,\n                user_id: userId,\n                state_path: statePath,\n            };\n\n            // Make the POST request to create a cabinet\n            const response = await this.createCabinet<CreateCabinetResponse>(\n                `/cabinets/telegram/${telegramId}`,\n                payload\n            );\n\n            // Extract the updated user from the response\n            const updatedUser: User = response?.user || null;\n\n            // Update the cache with the new user data\n            await CacheService.set(cacheKey, updatedUser, 3600); // Cache expires in 1 hour\n\n            console.log(`Cabinet \"${name}\" created for Telegram ID ${telegramId}. Updated user data cached.`);\n            return updatedUser;\n        } catch (error) {\n            // Handle errors (e.g., user not found, validation errors)\n            console.error(`Error creating cabinet for Telegram ID ${telegramId}:`, error);\n\n            // Optionally, you can handle specific error types here\n            // For example, if using Axios, you can check error.response.status\n\n            return null;\n        }\n    }\n\n    public async deleteCabinetByTelegramId(\n        telegramId: number,\n        cabinetId: string) {\n        try {\n            const response = await axios.delete(\n                `${this.laravelApiUrl}/cabinets/telegram/${telegramId}/${cabinetId}`\n            );\n            return response.data;\n        } catch (error) {\n            console.error('Error deleting cabinet:', error);\n            throw new Error('Error deleting cabinet');\n        }\n    }\n\n    public async updateCabinetByTelegramId(\n        telegramId: number,\n        cabinetId: string,\n        payload: any) {\n        try {\n            const response = await axios.put(\n                `${this.laravelApiUrl}/cabinets/telegram/${telegramId}/${cabinetId}`, {\n                    name: payload.name,\n                    settings: payload.settings\n                }\n            );\n            return response.data;\n        } catch (error) {\n            console.error('Error updating cabinet:', error);\n            throw new Error('Error updating cabinet');\n        }\n    }\n\n    public async deleteNotification(\n        notificationId: string\n    ): Promise<void> {\n        try {\n            await axios.delete(\n                `${this.laravelApiUrl}/notifications/telegram/${notificationId}`\n            );\n        } catch (error) {\n            console.error('Error deleting notification:', error);\n            throw new Error('Error deleting notification');\n        }\n    }\n\n    /**\n     * Fetches the user data from the Laravel API.\n     *\n     * @param telegramId - The Telegram ID of the user.\n     * @returns A Promise that resolves to the User object.\n     */\n    private async fetchUserFromApi(telegramId: number): Promise<User> {\n        const response = await axios.get<User>(`${this.laravelApiUrl}/users/telegram/${telegramId}`);\n        return response.data;\n    }\n\n    /**\n     * Fetches paginated notifications from the Laravel API.\n     *\n     * @param telegramId - The Telegram ID of the user.\n     * @param page - The page number to retrieve.\n     * @param perPage - Number of notifications per page.\n     * @param type - Either 'search' or 'booking'.\n     * @returns A Promise that resolves to PaginatedNotifications.\n     */\n    private async fetchNotificationsFromApi(\n        telegramId: number,\n        page: number,\n        perPage: number,\n        type: string\n    ): Promise<PaginatedNotifications> {\n        const response = await axios.get<PaginatedNotifications>(\n            `${this.laravelApiUrl}/notifications/telegram/${telegramId}`,\n            {\n                params: {\n                    page,\n                    per_page: perPage,\n                    type\n                },\n            }\n        );\n        return response.data;\n    }\n\n    /**\n     * Makes a POST request to create a cabinet.\n     *\n     * @param url - The API endpoint URL.\n     * @param data - The data to be sent in the request body.\n     * @returns A Promise that resolves to the response data.\n     * @template T - The type of the response data.\n     * @private\n     * */\n\n    private async createCabinet<T>(url: string, data: any): Promise<T> {\n        const response = await axios.post<T>(`${this.laravelApiUrl}${url}`, data);\n        return response.data;\n    }\n\n\n\n}\n\nexport default new LaravelService();\n","import path from 'path';\nimport fs from 'fs';\nimport axios, { AxiosResponse } from 'axios';\n\n// Define the interfaces (if you need type safety)\ninterface StorageState {\n    cookies: { name: string; value: string }[];\n    origins: {\n        origin: string;\n        localStorage: { name: string; value: string }[];\n    }[];\n}\n\ninterface DraftsApiResponse {\n    result: {\n        drafts: any[];\n    };\n}\n\ninterface RowData {\n    createdAt: string;\n    updatedAt: string;\n    barcodeQuantity: string;\n    goodQuantity: string;\n    author: string;\n    draftId: string;\n    url: string;\n}\n\ninterface CreateSupplyResult {\n    result?: {\n        ids: { Id: string }[];\n    };\n}\n\nexport const getDraftsForUser = async (userId: string): Promise<RowData[]> => {\n    // Path to the user's state.json\n    const statePath = path.join('/var/www/wb-back/storage/state', `${userId}.json`);\n\n    if (!fs.existsSync(statePath)) {\n        throw new Error('User state not found.');\n    }\n\n    const storageState: StorageState = JSON.parse(fs.readFileSync(statePath, 'utf-8'));\n\n    // Extract cookies and WBTokenV3\n    const { cookies, origins } = storageState;\n    let cookieHeader = cookies.map(cookie => `${cookie.name}=${cookie.value}`).join('; ');\n\n    const originData = origins.find(origin => origin.origin === 'https://seller.wildberries.ru');\n    if (!originData) {\n        throw new Error('Origin data not found in state.');\n    }\n\n    const wbTokenEntry = originData.localStorage.find(item => item.name === 'wb-eu-passport-v2.access-token');\n    const wbTokenValue = wbTokenEntry ? wbTokenEntry.value : null;\n\n    if (!wbTokenValue) {\n        throw new Error('WBTokenV3 token not found in localStorage.');\n    }\n\n    // Add WBTokenV3 to cookies\n    cookieHeader += `; WBTokenV3=${wbTokenValue}`;\n\n    // Define the API endpoint\n    const apiUrl = 'https://seller-supply.wildberries.ru/ns/sm-draft/supply-manager/api/v1/draft/listDrafts';\n\n    // Define the request payload\n    const data = {\n        params: {\n            filter: {\n                orderBy: {\n                    createdAt: -1,\n                },\n            },\n            limit: 10,\n            offset: 0,\n        },\n        jsonrpc: '2.0',\n        id: 'json-rpc_20',\n    };\n\n    // Define headers\n    const headers = {\n        'Content-Type': 'application/json',\n        'Cookie': cookieHeader,\n        'Accept': '*/*',\n        'User-Agent':\n            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36',\n        'Origin': 'https://seller.wildberries.ru',\n        'Referer': 'https://seller.wildberries.ru/',\n        'Accept-Language': 'ru,en-GB;q=0.9,en-US;q=0.8,en;q=0.7',\n        'sec-ch-ua': '\"Chromium\";v=\"128\", \"Not;A=Brand\";v=\"24\", \"Google Chrome\";v=\"128\"',\n    };\n\n    // Make the API request using axios\n    const response: AxiosResponse<DraftsApiResponse> = await axios.post(apiUrl, data, { headers });\n\n    // Extract and process drafts data\n    const drafts = response.data.result.drafts;\n\n    const filteredDrafts = drafts.filter(draft => draft.barcodeQuantity > 0);\n    return filteredDrafts.map(draft => ({\n        createdAt: draft.createdAt,\n        updatedAt: draft.updatedAt,\n        barcodeQuantity: draft.barcodeQuantity.toString(),\n        goodQuantity: draft.goodQuantity.toString(),\n        author: draft.author,\n        draftId: draft.ID,\n        url: `https://seller.wildberries.ru/supplies-management/drafts/draft-detail?draftNumber=${draft.ID}`,\n    }));\n};\n\n\nexport const createOrderRequest = async (cabinetId:string, draftId:string, warehouseId:string, boxTypeMask:string): Promise<{\n    preorderID: string;\n    message: string\n}> => {\n    // Validate request body\n    if (!cabinetId || !draftId || !warehouseId || !boxTypeMask) {\n       throw new Error('Missing required parameters.');\n    }\n\n    try {\n        // Construct the path to the user's state.json\n        const statePath = path.join('/var/www/wb-back/storage/state', `${cabinetId}.json`);\n\n        // Check if the state file exists\n        if (!fs.existsSync(statePath)) {\n            throw new Error('User state not found.' );\n        }\n\n        // Read and parse the storage state\n        const storageStateRaw = fs.readFileSync(statePath, 'utf-8');\n        const storageState: StorageState = JSON.parse(storageStateRaw);\n\n        // Extract cookies and construct the Cookie header\n        const cookies = storageState.cookies;\n        let cookieHeader = cookies.map(cookie => `${cookie.name}=${cookie.value}`).join('; ');\n\n        // Find origin data for Wildberries seller\n        const originData = storageState.origins.find(origin => origin.origin === 'https://seller.wildberries.ru');\n        if (!originData) {\n            throw new Error('Origin data not found in state.' );\n        }\n\n        // Retrieve WBTokenV3 from localStorage\n        const wbTokenEntry = originData.localStorage.find(item => item.name === 'wb-eu-passport-v2.access-token');\n        const wbTokenValue = wbTokenEntry ? wbTokenEntry.value : null;\n\n        if (!wbTokenValue) {\n            throw new Error('WBTokenV3 token not found in localStorage.');\n        }\n\n        // Append WBTokenV3 to the Cookie header\n        cookieHeader += `; WBTokenV3=${wbTokenValue}`;\n\n        // Define HTTP headers for the request\n        const headers = {\n            'Content-Type': 'application/json',\n            'Cookie': cookieHeader,\n            'Accept': '*/*',\n            'User-Agent': 'Mozilla/5.0 (compatible)',\n            'Origin': 'https://seller.wildberries.ru',\n            'Referer': 'https://seller.wildberries.ru/',\n            'Accept-Language': 'ru,en-GB;q=0.9,en-US;q=0.8,en;q=0.7',\n        };\n\n        // **b. Create Supply**\n        const createSupplyUrl = 'https://seller-supply.wildberries.ru/ns/sm-supply/supply-manager/api/v1/supply/create';\n\n        //Monopallet 32\n        //Koroba 4\n        const boxTypeCorrect = boxTypeMask == \"5\" ? 32 : 4;\n        // Prepare the payload for creating supply\n        const createSupplyData = {\n            params: {\n                boxTypeMask: boxTypeCorrect,\n                draftID: draftId,\n                transitWarehouseId: null,\n                warehouseId: Number(warehouseId),\n            },\n            jsonrpc: \"2.0\",\n            id: \"json-rpc_26\"\n        };\n\n        // Make the POST request to create supply\n        const createSupplyResponse: AxiosResponse<CreateSupplyResult> = await axios.post(createSupplyUrl, createSupplyData, { headers });\n        const createSupplyResult = createSupplyResponse.data;\n\n        // Extract preorderID from the response\n        const preorderID = createSupplyResult?.result?.ids[0]?.Id;\n        console.log('createSupplyResult:', createSupplyResult);\n\n        // Respond with success and the preorderID\n        return {\n            message: 'Order created successfully.',\n            preorderID: preorderID,\n        };\n    } catch (error: any) {\n        console.error('Error during order creation:', error.message);\n        throw new Error('Internal Server Error.');\n    }\n};\n","// src/services/UserService.ts\n\nimport axios from 'axios';\nimport CacheService from '../utils/redis/Cache/Cache';\nimport {Warehouse, WarehouseResponse} from \"../telegraf/types/Warehouses\";\n\nclass WildberriesSuppliesApi {\n    private laravelApiUrl: string;\n\n    constructor() {\n        const apiUrl = process.env.LARAVEL_API_URL;\n        if (!apiUrl) {\n            throw new Error('LARAVEL_API_URL is not defined in environment variables.');\n        }\n        this.laravelApiUrl = apiUrl;\n    }\n\n\n\n    /**\n     * Retrieves paginated notifications for a user by their Telegram ID.\n     *\n     * @param telegramId - The Telegram ID of the user.\n     * @param page - The page number to retrieve.\n     * @param perPage - Number of notifications per page.\n     * @returns A Promise that resolves to PaginatedNotifications or null if not found.\n     */\n    public async getWarehouses(): Promise<Warehouse[] | null> {\n        const cacheKey = `warehouses`;\n        try {\n            return await CacheService.rememberCacheValue(\n                cacheKey,\n                () => this.fetchWarehousesFromApi(),\n                3600*24 // Cache expiration set to 2 hours (7200 seconds)\n            );\n        } catch (error) {\n            console.error('Error fetching warehouses:', error);\n            return null;\n        }\n    }\n\n\n     /**\n     * Fetches warehouses data from the Laravel API.\n     *\n     * @returns A Promise that resolves to the User object.\n     */\n    private async fetchWarehousesFromApi(): Promise<Warehouse[]> {\n        const response = await axios.get<WarehouseResponse>(`${this.laravelApiUrl}/warehouses`);\n        return response.data.data;\n    }\n\n}\n\nexport default new WildberriesSuppliesApi();\n","import { Telegraf, session, Scenes, Markup } from 'telegraf';\nimport WarehouseBot from '../services/warehouseBot';\nimport logger from '../../utils/logger/loggerTelegram'; // Ensure correct path\nimport { Redis as RedisStore } from '@telegraf/session/redis';\nimport {MyContext, MySession} from \"../types/MyContext\";\n\n// Import mainScene from the new file\nimport CacheService from '../../utils/redis/Cache/Cache';\nimport { mainScene } from '../services/scenes/mainScene';\nimport subscriptionWizard from \"../services/scenes/subscriptionScene\";\nimport autoBookingWizard from \"../services/scenes/autoBookingScene\";\nimport {searchRequestsScene} from \"../services/scenes/searchRequestsScene\";\nimport cabinetWizzard from \"../services/scenes/createCabinetScene\";\nimport searchSlotsWizard from \"../services/scenes/searchSlotsScene\";\nimport LaravelService from \"../../services/laravelService\";\nimport {cabinetGate} from \"../utils/cabinetGate\";\nimport showCabinetsScene from \"../services/scenes/showCabinetsScene\";\nimport reauthCabinetWizzard from \"../services/scenes/reauthCabinetScene\";\nimport axios, {AxiosResponse} from \"axios\";\nimport {fmt} from \"telegraf/format\";\n\n// If you have other scenes like subscriptionScene, consider importing them similarly\n\n\nconst botToken: string = process.env.TELEGRAM_BOT_TOKEN_SUPPLIES_NEW!;\nconst bot: Telegraf<MyContext> = new Telegraf(botToken);\nconst warehouseBot = new WarehouseBot(bot);\n\n\nconst store = RedisStore<MySession>({\n    url: 'redis://redis:6379/2',\n});\n\n// Initialize the stage with imported scenes\nconst stage = new Scenes.Stage<MyContext>([mainScene, subscriptionWizard, autoBookingWizard, searchRequestsScene, cabinetWizzard, searchSlotsWizard, showCabinetsScene, reauthCabinetWizzard]);\n\n// Middleware to log incoming updates\nbot.use(session({ store }));\nbot.use(stage.middleware());\nbot.use(async (ctx: MyContext, next: () => Promise<void>) => {\n    logger.info('Received update', { update: ctx.update });\n    await next();\n});\n\n// Handle /start command\nbot.start(async (ctx: MyContext) => {\n    const startPayload = ctx.payload;\n\n    if (startPayload) {\n        if(startPayload === 'autobooking') {\n            await cabinetGate(ctx, 'autoBookingWizard');\n        }\n        await ctx.scene.enter('main');\n    } else {\n        await ctx.scene.enter('main');\n    }\n});\n\n// Handle 'mainmenu' action\nbot.action('mainmenu', async (ctx: MyContext) => {\n    await ctx.scene.enter('main');\n    await ctx.answerCbQuery('🏦Главная');\n});\n\n// Handle /ping command\nbot.command('ping', (ctx: MyContext) => {\n    ctx.reply('pong!');\n});\n\nbot.command('autobooking', async (ctx: MyContext) => {\n    await cabinetGate(ctx, 'autoBookingWizard');\n});\n\nmainScene.action('payments', async (ctx: MyContext) => {\n    await ctx.scene.enter('subscriptionWizard');\n});\n\n\nbot.on('callback_query', async (ctx: MyContext) => {\n    await ctx.answerCbQuery('👌');\n});\n\nbot.action('autobooking', async (ctx: MyContext) => {\n    await cabinetGate(ctx, 'autoBookingWizard');\n});\n\n\nexport const createUserCabinetAndNotify = async (chatId: string, message: string, payload: any) => {\n\n    const telegramId = payload.telegramId;\n    const name = payload.credentials.name;\n    const phoneNumber = payload.credentials.phone;\n    const userId = payload.userId;\n    const statePath = payload.credentials.statePath;\n\n    try {\n\n        const checkCabinetInCache = await CacheService.get(`reauth_cabinet_${telegramId}`);\n        if(checkCabinetInCache) {\n\n            const cabinet = JSON.parse(checkCabinetInCache);\n\n            cabinet.settings.statePath = statePath;\n            cabinet.is_active = true;\n            await LaravelService.updateCabinetByTelegramId(telegramId, cabinet.id, {name: cabinet.name, settings: cabinet.settings});\n            await CacheService.forget(`reauth_cabinet_${telegramId}`);\n        } else {\n            const cabinet = await LaravelService.createCabinetByTelegramId(telegramId, name, phoneNumber, userId, statePath);\n        }\n    } catch (error) {\n        console.error('Error creating user cabinet:', error);\n        const keyboard = Markup.inlineKeyboard([\n            [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n        ]);\n        await bot.telegram.sendMessage(chatId, '⚠️ Ошибка создания кабинета. Пожалуйста, попробуйте еще раз.', keyboard);\n    }\n    const messageText = fmt`🎉 Авторизация прошла успешно!\n\n🫡 Данные вашего кабинета\n\n📝 Название кабинета: ${name} \n📞 Номер телефона: ${phoneNumber};\n    `;\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('📦 Перейти в автобронирование', 'continue_autobooking')],\n        [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n    ]);\n    await bot.telegram.sendMessage(chatId, messageText, keyboard);\n};\n\nexport const sendMessageToClient = async (chatId: string, message: string, isButtonAvailable = true) => {\n\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n    ]);\n\n    try {\n        const response = await bot.telegram.sendMessage(chatId, message, isButtonAvailable ? keyboard : null);\n\n        console.log('Message sent to Telegram successfully!', response);\n        return true;\n    } catch (error: any) {\n        console.error('Exception occurred while sending message:', error.message);\n        return false;\n    }\n\n\n\n};\n// Export the bot instance\nexport default bot;\n","// ./scenes/autoBookingActions.ts\n\nimport { Markup } from 'telegraf';\nimport {bold, code, fmt, link} from \"telegraf/format\";\nimport { MyContext } from '../../../types/MyContext';\nimport logger from '../../../../utils/logger/loggerTelegram';\nimport WarehouseService from \"../../../../services/WarehouseService\";\nimport {createOrderRequest, getDraftsForUser} from \"../../../../services/wildberriesService\";\nimport CacheService from '../../../../utils/redis/Cache/Cache';\nimport { COEFFICIENTS, BOX_TYPES, DATES, WAREHOUSES, COEFFICIENTS_TEXT_ONLY, BOX_TYPES_TEXT_ONLY } from \"../../../../utils/wildberries/consts\";\nimport {formatDateDDMMYYYY} from \"../../../../utils/dateUtils\";\nimport LaravelService from \"../../../../services/laravelService\";\n\n// Default buttons with Back and Main Menu\nconst defaultButtons = [\n    [Markup.button.callback('👈 Назад', 'back')],\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n];\n\nconst defaultButtonsMenuOnly = [\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n];\n\nexport const sendSearchSlotMessage = async (ctx: MyContext) => {\n    const message = fmt`🫡 Поиск слотов\n    \nПоиск слотов — запуск отслеживания по вашим параметрам без автоматического бронирования. Как только нужный слот будет найден, вы получите уведомление.\n\nРекомендуем воспользоваться автобронирование поставки - /autobooking`;\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('🚀 Приступить', 'search_slot')],\n        ...defaultButtonsMenuOnly\n    ]);\n\n    try {\n        await ctx.editMessageText(message, {\n            ...keyboard,\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n        await ctx.answerCbQuery('🔍 Поиск слотов');\n    } catch (error) {\n        logger.error('Error sending search slot message:', error);\n        await ctx.reply(message, keyboard);\n    }\n};\n/**\n * Sends the cabinet selection message with available cabinets.\n */\nexport const sendCabinetSelection = async (ctx: MyContext, cabinets: any[]) => {\n\n    const activeCabinets = cabinets.filter(cab => cab?.settings?.cabinet_id && cab?.settings?.is_active);\n\n    let cabinetsButtons = [];\n    if(activeCabinets.length > 0) {\n        cabinetsButtons = activeCabinets.map((cabinet) => {\n            return [Markup.button.callback(`📦 ${cabinet.name}`, `select_cabinet_${cabinet.settings.cabinet_id}`)];\n        });\n    } else{\n        cabinetsButtons = [\n            [Markup.button.callback('➕ Добавить кабинет', 'create_cabinet')],\n        ];\n    }\n\n    const keyboard = Markup.inlineKeyboard(\n        [...cabinetsButtons, ...defaultButtonsMenuOnly]\n    );\n\n    const message = fmt`🫡 Выберите нужный кабинет`;\n\n    try {\n        await ctx.editMessageText(message, {\n            ...keyboard,\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n        await ctx.answerCbQuery('📦 Автобронирование');\n    } catch (error) {\n        logger.error('Error sending cabinet selection message:', error);\n        await ctx.reply(message, keyboard);\n    }\n};\n\n/**\n * Sends the draft selection message with available drafts.\n */\nexport const sendDraftSelection = async (ctx: MyContext) => {\n    try {\n        await ctx.answerCbQuery('😎 Ищем черновики');\n    } catch (error) {\n        logger.error('Error answering callback query:', error);\n    }\n\n    logger.info('Entered draft selection');\n    try {\n        const cacheKey = `drafts_data_${ctx.from.id}`;\n        const selectedCabinetId = ctx.session.autobookingForm.cabinetId;\n        const drafts = await CacheService.rememberCacheValue(\n            cacheKey,\n            () => getDraftsForUser(selectedCabinetId),\n            10 // Cache expiration set to 2 hours\n        );\n\n        if (!drafts || drafts.length === 0) {\n            await ctx.answerCbQuery('У вас нет доступных черновиков', {\n                show_alert: true,\n            });\n            return;\n        }\n\n        const draftButtons = drafts.map((draft) => {\n            const date = new Date(draft.createdAt).toLocaleDateString('ru-RU');\n            const goodQuantity = draft.goodQuantity;\n            const title = `${date} – кол-во товаров – ${goodQuantity} шт.`;\n\n            return [Markup.button.callback(`· ${title}`, `select_draft_${draft.draftId}`)];\n        });\n\n        const keyboard = Markup.inlineKeyboard([...draftButtons, ...defaultButtons]);\n\n        const message = \"🫡 Выберите необходимый черновик с заполненными товарами 👇\";\n\n        await ctx.editMessageText(message, {\n            ...keyboard,\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n    } catch (error) {\n        logger.error('Error getting drafts:', error);\n        await ctx.reply('Произошла ошибка при получении черновиков. Пожалуйста, попробуйте позже.', Markup.inlineKeyboard(defaultButtonsMenuOnly));\n        throw error;\n    }\n};\n\n/**\n * Sends the warehouse selection message with available warehouses.\n */\nexport const sendWarehouseSelection = async (ctx: MyContext) => {\n    logger.info('Entered warehouse selection');\n    try {\n        const warehouses = await WarehouseService.getWarehouses(ctx.session.page);\n        const warehouseButtons = warehouses.keyboard.map((row) => row.map((button) => {\n            return Markup.button.callback(button.text, button.callback_data);\n        }));\n\n        const keyboard = Markup.inlineKeyboard([...warehouseButtons, ...defaultButtons]);\n\n        const message = fmt`🫡 Выберите необходимый склад`;\n\n        try {\n            await ctx.answerCbQuery('😎 Выберите склад');\n            await ctx.editMessageText(message, {\n                ...keyboard,\n                link_preview_options: {\n                    is_disabled: true\n                },\n            });\n        } catch (error) {\n            logger.error('Error sending warehouse selection message:', error);\n            await ctx.reply(message, keyboard);\n        }\n    } catch (error) {\n        logger.error('Error sending warehouse selection message:', error);\n        await ctx.reply('Произошла ошибка при получении складов. Пожалуйста, попробуйте позже.', Markup.inlineKeyboard(defaultButtons));\n    }\n};\n\n/**\n * Sends the coefficient selection message with available coefficients.\n */\nexport const sendCoefficientSelection = async (ctx: MyContext) => {\n    const warehouseId = ctx.session.autobookingForm.warehouseId;\n\n    const message = fmt`🫡 Выберите нужный коэффициент\n\nНапример, если вы выберете до ${code(`x2`)}, бот будет искать варианты с коэффициентом до ${code(`x2`)}, включая бесплатные, ${code(`x1`)} и ${code(`x2`)}.\n\n${bold(`Данные по заявке`)}: \n\n${bold(`Склад`)} — ${code(WAREHOUSES[warehouseId])}`;\n\n    let coefficientsButtons = [];\n\n    // Add the first button as a separate row\n    coefficientsButtons.push([\n        Markup.button.callback(COEFFICIENTS[0], `wh_coefficient_set_0`)\n    ]);\n\n    // Add the remaining buttons in pairs\n    for (let i = 1; i < 7; i += 2) {\n        let row = [\n            Markup.button.callback(COEFFICIENTS[i], `wh_coefficient_set_${i}`)\n        ];\n\n        if (i + 1 < 7) {\n            row.push(Markup.button.callback(COEFFICIENTS[i + 1], `wh_coefficient_set_${i + 1}`));\n        }\n\n        coefficientsButtons.push(row);\n    }\n\n    const keyboard = Markup.inlineKeyboard([...coefficientsButtons, ...defaultButtons]);\n\n    try {\n        await ctx.editMessageText(message, {\n            ...keyboard,\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n        await ctx.answerCbQuery('😎 Выберите коэффициент');\n    } catch (error) {\n        logger.error('Error sending coefficient selection message:', error);\n        await ctx.reply(message, keyboard);\n    }\n};\n\n/**\n * Sends the box type selection message with available box types.\n */\nexport const sendBoxTypeSelection = async (ctx: MyContext) => {\n    const warehouseId = ctx.session.autobookingForm.warehouseId;\n    const coefficient = ctx.session.autobookingForm.coefficient;\n\n    const message = fmt`🫡 Выберите тип упаковки\n\n${bold(`Данные по заявке`)}: \n\n${bold(`Склад`)} — ${code(WAREHOUSES[warehouseId])}\n${bold(`Коэффицент`)} — ${code(COEFFICIENTS_TEXT_ONLY[coefficient])}`;\n\n    const boxTypes = [];\n    for (const key in BOX_TYPES) {\n        boxTypes.push([Markup.button.callback(BOX_TYPES[key], `wh_box_type_set_${key}`)]);\n    }\n\n    const keyboard = Markup.inlineKeyboard([...boxTypes, ...defaultButtons]);\n\n    try {\n        await ctx.editMessageText(message, {\n            ...keyboard,\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n        await ctx.answerCbQuery('😎 Выберите тип упаковки');\n    } catch (error) {\n        logger.error('Error sending box type selection message:', error);\n        await ctx.reply(message, keyboard);\n    }\n};\n\n/**\n * Sends the date selection message with available date options.\n */\nexport const sendDateSelection = async (ctx: MyContext) => {\n    const warehouseId = ctx.session.autobookingForm.warehouseId;\n    const coefficient = ctx.session.autobookingForm.coefficient;\n    const boxTypeId = ctx.session.autobookingForm.boxTypeId;\n\n    const message = fmt`🫡 Выберите подходящую дату\n\nЕсли выбрана опция \"неделя\" или \"месяц\", вы задаёте период, и бот найдёт ближайшую доступную дату в этом диапазоне.\n\n${bold(`Данные по заявке`)}: \n\n${bold(`Склад`)} — ${code(WAREHOUSES[warehouseId])}\n${bold(`Коэффицент`)} — ${code(COEFFICIENTS_TEXT_ONLY[coefficient])}\n${bold(`Тип упаковки`)} — ${code(BOX_TYPES_TEXT_ONLY[boxTypeId])}\n${boxTypeId === '5' && ctx.session.autobookingForm.monopalletCount ? fmt`${bold('Кол-во монопаллетов')}: ${code(ctx.session.autobookingForm.monopalletCount)}` : ''}\n`;\n\n    const dates = [];\n\n    for (const key in DATES) {\n        dates.push([Markup.button.callback(DATES[key], `wh_date_set_${key}`)]);\n    }\n\n    const keyboard = Markup.inlineKeyboard([\n        ...dates,\n        ...defaultButtons\n    ]);\n\n    try {\n        await ctx.editMessageText(message, {\n            ...keyboard,\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n        await ctx.answerCbQuery('😎 Выберите дату');\n    } catch (error) {\n        logger.error('Error sending date selection message:', error);\n        await ctx.reply(message, keyboard);\n    }\n};\n\n/**\n * Sends the order confirmation message.\n */\nexport const sendOrderConfirmation = async (ctx: MyContext, selectedDate: string) => {\n    let datesText: string = '';\n    if (selectedDate === 'customdates') {\n        datesText = ctx.session.autobookingForm.dates.join(', ');\n    } else {\n        const checkUntilDate = new Date();\n\n        const todayDate = formatDateDDMMYYYY(new Date());\n        let prefix = '';\n        switch (selectedDate) {\n            case 'today':\n                checkUntilDate.setHours(23, 59, 59, 999);\n                break;\n            case 'tomorrow':\n                checkUntilDate.setDate(checkUntilDate.getDate() + 1);\n                checkUntilDate.setHours(23, 59, 59, 999);\n                break;\n            case 'week':\n                checkUntilDate.setDate(checkUntilDate.getDate() + 7);\n                checkUntilDate.setHours(23, 59, 59, 999);\n                prefix = `${todayDate} - `;\n                break;\n            case 'month':\n                checkUntilDate.setMonth(checkUntilDate.getMonth() + 1);\n                checkUntilDate.setHours(23, 59, 59, 999);\n                prefix = `${todayDate} - `;\n                break;\n        }\n\n        ctx.session.autobookingForm.checkUntilDate = formatDateDDMMYYYY(checkUntilDate);\n\n        datesText = `${prefix}${ctx.session.autobookingForm.checkUntilDate}`;\n    }\n\n    const warehouseId = ctx.session.autobookingForm.warehouseId;\n    const coefficient = ctx.session.autobookingForm.coefficient;\n    const boxTypeId = ctx.session.autobookingForm.boxTypeId;\n\n\n    const message = fmt`\n${bold(`🫡 Ваша заявка`)}: \n\n${bold(`Склад`)} — ${code(WAREHOUSES[warehouseId])}\n${bold(`Коэффицент`)} — ${code(COEFFICIENTS_TEXT_ONLY[coefficient])}\n${bold(`Тип упаковки`)} — ${code(BOX_TYPES_TEXT_ONLY[boxTypeId])}\n${boxTypeId === '5' && ctx.session.autobookingForm.monopalletCount ? fmt`${bold('Кол-во монопаллетов')}: ${code(ctx.session.autobookingForm.monopalletCount)}` : ''}\n${bold(`Дата`)} — ${code(datesText)}\n\n`;\n\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('🚀 Подтвердить', 'confirm_order')],\n        ...defaultButtons\n    ]);\n\n    try {\n        await ctx.editMessageText(message, {\n            ...keyboard,\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n        await ctx.answerCbQuery('😎 Подтвердите заказ');\n    } catch (error) {\n        logger.error('Error sending order confirmation message:', error);\n        await ctx.reply(message, keyboard);\n    }\n};\n\n/**\n * Sends the final confirmation message after the order is confirmed.\n */\nexport const sendFinalConfirmation = async (ctx: MyContext) => {\n    let datesText: string = '';\n    if (ctx.session.autobookingForm.dates.length > 0) {\n        datesText = ctx.session.autobookingForm.dates.join(', ');\n    } else {\n        datesText = ctx.session.autobookingForm.checkUntilDate;\n    }\n\n   if(ctx.session.autobookingForm.isBooking) {\n       //creating order in wb\n       try {\n           let userId = ctx.session.autobookingForm.cabinetId;\n           let draftId = ctx.session.autobookingForm.draftId;\n           let warehouseId = ctx.session.autobookingForm.warehouseId;\n           let boxTypeMask = ctx.session.autobookingForm.boxTypeId;\n\n           const response = await createOrderRequest(userId, draftId, warehouseId, boxTypeMask);\n           ctx.session.autobookingForm.preorderId = response.preorderID;\n       } catch (error) {\n           logger.error('Error creating order:', error\n           );\n           await ctx.reply('Произошла ошибка при создании заказа. Пожалуйста, попробуйте позже.', Markup.inlineKeyboard(defaultButtonsMenuOnly));\n           throw error;\n       }\n   }\n\n    try {\n        await LaravelService.createNotificationByTelegramId(ctx.from.id, ctx.session.autobookingForm);\n    } catch (error) {\n        logger.error('Error creating notification:', error);\n        await ctx.reply('Произошла ошибка при создании уведомления. Пожалуйста, попробуйте позже.', Markup.inlineKeyboard(defaultButtonsMenuOnly));\n        throw error;\n    }\n\n    const warehouseId = ctx.session.autobookingForm.warehouseId;\n    const coefficient = ctx.session.autobookingForm.coefficient;\n    const boxTypeId = ctx.session.autobookingForm.boxTypeId;\n\n    const isBookingMessage = ctx.session.autobookingForm.isBooking ? ', как только найдем наша система автоматически забронирует поставку' : '';\n    const message = fmt`🫡 Ваша заявка готова \n\nМы уже ищем тайм-слот для вашей поставки${isBookingMessage}. Каждые 24 часа мы будем присылать статус заявки 🫶\n\n${bold(`Данные по заявке`)}: \n\n${bold(`Склад`)} — ${code(WAREHOUSES[warehouseId])}\n${bold(`Коэффицент`)} — ${code(COEFFICIENTS_TEXT_ONLY[coefficient])}\n${bold(`Тип упаковки`)} — ${code(BOX_TYPES_TEXT_ONLY[boxTypeId])}\n${boxTypeId === '5' && ctx.session.autobookingForm.monopalletCount ? fmt`${bold('Кол-во монопаллетов')}: ${code(ctx.session.autobookingForm.monopalletCount)}` : ''}\n${bold(`Дата`)} — ${code(datesText)}\n`;\n\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n    ]);\n\n    try {\n        await ctx.editMessageText(message, {\n            ...keyboard,\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n    } catch (error) {\n        logger.error('Error sending final confirmation message:', error);\n        await ctx.reply(message, keyboard);\n    }\n};\n\n/**\n * Sends a prompt asking the user to input custom dates.\n */\nexport const sendCustomDatePrompt = async (ctx: MyContext) => {\n    const message = fmt`🫡 Введите несколько нужных дат через запятую в формате ДД.ММ.ГГГГ, например:\n• ${code('10.08.2025, 12.08.2025')}\n\nНа каждую дату будет создана отдельная заявка.`;\n\n    const keyboard = Markup.inlineKeyboard([...defaultButtons]);\n\n    try {\n        await ctx.editMessageText(message, {\n            ...keyboard,\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n        await ctx.answerCbQuery('📝 Введите ваши даты');\n    } catch (error) {\n        logger.error('Error sending custom date prompt:', error);\n        await ctx.reply(message, keyboard);\n    }\n};\n\n/**\n * Sends a pallet count input prompt.\n */\nexport const sendPalletCountPrompt = async (ctx: MyContext) => {\n    const warehouseId = ctx.session.autobookingForm.warehouseId;\n    const coefficient = ctx.session.autobookingForm.coefficient;\n    const boxTypeId = ctx.session.autobookingForm.boxTypeId;\n\n    const message = fmt`🫡 Введите кол-во монопаллетов\n    \n${bold(`Данные по заявке`)}:\n${bold(`Склад`)} — ${code(WAREHOUSES[warehouseId])}\n${bold(`Коэффицент`)} — ${code(COEFFICIENTS_TEXT_ONLY[coefficient])}\n${bold(`Тип упаковки`)} — ${code(BOX_TYPES_TEXT_ONLY[boxTypeId])}\n    `;\n\n    const keyboard = Markup.inlineKeyboard([...defaultButtons]);\n\n    try {\n        await ctx.editMessageText(message, {\n            ...keyboard,\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n        await ctx.answerCbQuery('📝 Введите количество монопаллетов');\n    } catch (error) {\n        logger.error('Error sending pallet count prompt:', error);\n        await ctx.reply(message, keyboard);\n    }\n}\n\n/**\n * Sends an error message with a standard keyboard.\n */\nexport const sendErrorMessage = async (ctx: MyContext, errorMsg: string) => {\n    const keyboard = Markup.inlineKeyboard([...defaultButtons]);\n\n    try {\n        await ctx.editMessageText(errorMsg, {\n            ...keyboard,\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n    } catch (error) {\n        logger.error('Error sending error message:', error);\n        await ctx.reply(errorMsg, keyboard);\n    }\n};\n\nexport const sendInstructions = async (ctx: MyContext) => {\n    const message = fmt`Создайте в кабинете черновик поставки не выбирая дату и склад поставки и сохраните черновик.\nИнструкции — ${link(`тут.`, 'http://surl.li/awdppl')}`;\n\n    const buttonCreate = [Markup.button.callback('🤞 Создать поставку из черновика', 'start_autobooking')];\n    const keyboard = Markup.inlineKeyboard([buttonCreate, ...defaultButtons]);\n\n\n    try {\n        await ctx.editMessageText(message, {\n            ...keyboard,\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n        await ctx.answerCbQuery('📝 Инструкции');\n    } catch (error) {\n        logger.error('Error sending instructions:', error);\n        await ctx.reply(message, keyboard);\n    }\n\n}\n\n","// ./scenes/autoBookingWizard.ts\n\nimport { Scenes, Markup, Composer } from 'telegraf';\nimport { MyContext, AutoBookingState } from '../../types/MyContext';\nimport logger from '../../../utils/logger/loggerTelegram';\nimport LaravelService from \"../../../services/laravelService\";\nimport CacheService from '../../../utils/redis/Cache/Cache';\nimport { getDraftsForUser } from \"../../../services/wildberriesService\";\nimport { searchRequestsScene } from \"./searchRequestsScene\";\nimport { BOX_TYPES, COEFFICIENTS, DATES, WAREHOUSES } from \"../../../utils/wildberries/consts\";\nimport {\n    sendCabinetSelection,\n    sendDraftSelection,\n    sendWarehouseSelection,\n    sendCoefficientSelection,\n    sendBoxTypeSelection,\n    sendDateSelection,\n    sendOrderConfirmation,\n    sendFinalConfirmation,\n    sendErrorMessage, sendCustomDatePrompt, sendPalletCountPrompt, sendInstructions,\n} from './actions/autoBookingActions';\nimport {fmt} from \"telegraf/format\";\n\n// Default buttons with Back and Main Menu\nconst defaultButtons = [\n    [Markup.button.callback('👈 Назад', 'back')],\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n];\n\n// Composer instances for each step\nconst handleCabinetSelection = new Composer<MyContext>();\nhandleCabinetSelection.action(/select_cabinet_(.+)/, async (ctx) => {\n    const cabinetId = ctx.match[1];\n    ctx.session.autobookingForm.cabinetId = cabinetId;\n    try {\n        await sendInstructions(ctx);\n        return ctx.wizard.next();\n    }\n    catch (error) {\n        logger.error('Error sending draft selection:', error);\n        return ;\n    }\n});\n\nconst handleDraftSelection = new Composer<MyContext>();\nhandleDraftSelection.action(/select_draft_(.+)/, async (ctx) => {\n    const draftId = ctx.match[1];\n    ctx.session.autobookingForm.draftId = draftId;\n    await sendWarehouseSelection(ctx);\n    return ctx.wizard.next();\n});\n\nconst handleWarehouseSelection = new Composer<MyContext>();\nhandleWarehouseSelection.action(/select_warehouse_(.+)/, async (ctx) => {\n    const warehouseId = ctx.match[1];\n    ctx.session.autobookingForm.warehouseId = warehouseId;\n    await sendCoefficientSelection(ctx);\n    return ctx.wizard.next();\n});\n\nconst handleCoefficientSelection = new Composer<MyContext>();\nhandleCoefficientSelection.action(/wh_coefficient_set_(.+)/, async (ctx) => {\n    const coefficient = ctx.match[1];\n    ctx.session.autobookingForm.coefficient = coefficient;\n    await sendBoxTypeSelection(ctx);\n    return ctx.wizard.next();\n});\n\nconst handleBoxTypeSelection = new Composer<MyContext>();\nhandleBoxTypeSelection.action(/wh_box_type_set_(.+)/, async (ctx) => {\n    const boxType = ctx.match[1];\n    ctx.session.autobookingForm.boxTypeId = boxType;\n\n    // If boxType === 5 (Monopallet), then prompt for pallet count\n    if (boxType === '5') {\n        await sendPalletCountPrompt(ctx);\n        return ctx.wizard.next();\n    }\n\n    await sendDateSelection(ctx);\n    return ctx.wizard.selectStep(ctx.wizard.cursor + 2);\n});\n\nconst handlePalletCount = new Composer<MyContext>();\nhandlePalletCount.on('text', async (ctx) => {\n    const text = ctx.message.text;\n    const count = parseInt(text, 10);\n\n    if (isNaN(count) || count < 1) {\n        await ctx.reply('❌ Некорректное количество паллет. Пожалуйста, введите число больше 0.');\n        return;\n    }\n\n    ctx.session.autobookingForm.monopalletCount = count;\n    await sendDateSelection(ctx);\n    return ctx.wizard.next();\n});\n\nconst handleDateSelection = new Composer<MyContext>();\nhandleDateSelection.action(/wh_date_set_(.+)/, async (ctx) => {\n    const date = ctx.match[1];\n    if (date === 'customdates') {\n        await sendCustomDatePrompt(ctx); // Send prompt for custom dates\n        return ctx.wizard.next(); // Move to handleCustomDateInput step\n    } else {\n        await sendOrderConfirmation(ctx, date);\n        return ctx.wizard.selectStep(ctx.wizard.cursor + 2); // Skip custom date input step\n    }\n});\n\nconst handleCustomDateInput = new Composer<MyContext>();\nhandleCustomDateInput.on('text', async (ctx) => {\n    const input = ctx.message.text;\n    const dates = input.split(',').map(date => date.trim());\n\n    // Regular expression to match DD.MM.YYYY format\n    const dateRegex = /^\\d{2}\\.\\d{2}\\.\\d{4}$/;\n\n    // Find dates that do not match the regex\n    const invalidFormatDates = dates.filter(date => !dateRegex.test(date));\n\n    if (invalidFormatDates.length > 0) {\n        const errorMessage = fmt`❌ Некорректный формат даты: ${invalidFormatDates.join(', ')}.\nПожалуйста, введите даты в формате ДД.ММ.ГГГГ, разделяя их запятыми. Например:\n• 10.08.2025, 12.08.2025`;\n\n        // Send the error message with the default navigation buttons\n        await ctx.reply(errorMessage, {\n            ...Markup.inlineKeyboard([...defaultButtons]),\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n\n        return; // Stay on the current step\n    }\n\n    // Optional: Further validate if the dates are actual calendar dates\n    const invalidDates = [];\n    const validDates = [];\n\n    dates.forEach(dateStr => {\n        const [day, month, year] = dateStr.split('.').map(Number);\n        const dateObj = new Date(year, month - 1, day);\n        if (\n            dateObj.getFullYear() === year &&\n            dateObj.getMonth() === month - 1 &&\n            dateObj.getDate() === day\n        ) {\n            validDates.push(dateStr);\n        } else {\n            invalidDates.push(dateStr);\n        }\n    });\n\n    if (invalidDates.length > 0) {\n        const errorMessage = fmt`❌ Некорректные даты: ${invalidDates.join(', ')}.\nПожалуйста, убедитесь, что введённые даты существуют и находятся в формате ДД.ММ.ГГГГ.`;\n\n        // Send the error message with the default navigation buttons\n        await ctx.reply(errorMessage, {\n            ...Markup.inlineKeyboard([...defaultButtons]),\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n\n        return; // Stay on the current step\n    }\n\n    // If all dates are valid, save them to the session\n    ctx.session.autobookingForm.dates = validDates;\n\n    // Proceed to order confirmation\n    await sendOrderConfirmation(ctx, 'customdates');\n    return ctx.wizard.next();\n});\n\nconst handleOrderConfirmation = new Composer<MyContext>();\nhandleOrderConfirmation.action('confirm_order', async (ctx) => {\n    try {\n        await sendFinalConfirmation(ctx);\n        return ctx.scene.leave();\n    } catch {\n        return;\n    }\n});\n\n// Define the wizard scene\nconst autoBookingWizard = new Scenes.WizardScene<MyContext>(\n    'autoBookingWizard',\n    async (ctx) => {\n        ctx.session.page = 1;\n        ctx.session.autobookingForm = {\n            draftId: null,\n            cabinetId: null,\n            warehouseId: null,\n            coefficient: null,\n            dates: [],\n            checkUntilDate: null,\n            boxTypeId: null,\n            monopalletCount: null,\n            isBooking: true,\n        };\n\n        let user = null;\n        let state = ctx.scene.state as AutoBookingState;\n        user = state.user;\n\n        const cabinets = user.cabinets;\n        await sendCabinetSelection(ctx, cabinets);\n        return ctx.wizard.next();\n    },\n    handleCabinetSelection,\n    async (ctx) => {\n        try {\n            await sendDraftSelection(ctx);\n            return ctx.wizard.next();\n        }\n        catch (error) {\n            logger.error('Error sending draft selection:', error);\n            return ;\n        }\n    },\n\n    handleDraftSelection,\n    handleWarehouseSelection,\n    handleCoefficientSelection,\n    handleBoxTypeSelection,\n    handlePalletCount,\n    handleDateSelection,\n    handleCustomDateInput,\n    handleOrderConfirmation,\n);\n\n// Handle actions outside the wizard\nautoBookingWizard.action('mainmenu', async (ctx) => {\n    await ctx.scene.enter('main');\n    await ctx.answerCbQuery('👌 Главное меню');\n});\n\nautoBookingWizard.action('back', async (ctx) => {\n\n    const state = ctx.scene.state as AutoBookingState;\n\n    // Так как у нас есть дополнительный шаг - ввод кастомной даты\n    ctx.wizard.back();\n\n    await ctx.answerCbQuery('👈 Назад');\n\n    // Determine the new current step\n    const currentStep = ctx.wizard.cursor;\n\n    logger.info(`Navigated back to step ${currentStep}`);\n\n    // Call the appropriate send function based on the current step\n    switch (currentStep) {\n        case 1:\n            // Initial step: sendCabinetSelection\n            await sendCabinetSelection(ctx, state.user.cabinets);\n            break;\n        case 2:\n            // After Cabinet Selection: sendInstructions\n            await sendInstructions(ctx);\n            break;\n        case 3:\n            // After Instructions: sendDraftSelection\n            await sendDraftSelection(ctx);\n            break;\n        case 4:\n            // After Draft Selection: sendWarehouseSelection\n            await sendWarehouseSelection(ctx);\n            break;\n        case 5:\n            // After Warehouse Selection: sendCoefficientSelection\n            await sendCoefficientSelection(ctx);\n            break;\n        case 6:\n            // After Coefficient Selection: sendBoxTypeSelection\n            await sendBoxTypeSelection(ctx);\n            break;\n        case 7:\n            if (ctx.session.autobookingForm.boxTypeId === '5') {\n                // After Monopallet Count: sendPalletCountPrompt\n                await sendPalletCountPrompt(ctx);\n            } else {\n                ctx.wizard.selectStep(6);\n                await sendBoxTypeSelection(ctx);\n            }\n            break;\n        case 8:\n            // After Box Type Selection: sendDateSelection\n            await sendDateSelection(ctx);\n            break;\n        case 9:\n            // After Date Selection (either standard or custom): sendDateSelection\n            // currentStep is 7 because of the custom date input step, but we want to skip it to let user re-enter dates\n            ctx.wizard.selectStep(8);\n            await sendDateSelection(ctx);\n            break;\n        case 10:\n            // After Date Selection: sendOrderConfirmation\n            await sendOrderConfirmation(ctx, ctx.session.autobookingForm.checkUntilDate || 'customdates');\n            break;\n        default:\n            logger.warn(`Unhandled step ${currentStep} in back action`);\n            await sendErrorMessage(ctx, 'Неизвестный шаг. Пожалуйста, попробуйте снова.');\n            break;\n    }\n});\n\nautoBookingWizard.command('start', async (ctx) => {\n    await ctx.scene.enter('main');\n});\n\nautoBookingWizard.action('warehouses_next', async (ctx: MyContext) => {\n    if (ctx.session.page) {\n        logger.info('Incrementing page number');\n        ctx.session.page += 1;\n        await sendWarehouseSelection(ctx);\n    } else {\n        logger.warn('Page number not set');\n        ctx.session.page = 1;\n        await ctx.scene.reenter();\n    }\n});\n\nautoBookingWizard.action('warehouses_prev', async (ctx: MyContext) => {\n    if (ctx.session.page && ctx.session.page > 1) {\n        ctx.session.page -= 1;\n        await sendWarehouseSelection(ctx);\n    } else {\n        await ctx.answerCbQuery('Вы уже на первой странице.', { show_alert: true });\n    }\n});\n\nautoBookingWizard.action('create_cabinet', async (ctx: MyContext) => {\n    await ctx.scene.enter('createCabinetWizzard');\n});\n// Export the scene\nexport default autoBookingWizard;","import {Scenes, Markup, Composer} from 'telegraf';\nimport { MyContext } from '../../types/MyContext';\nimport logger from '../../../utils/logger/loggerTelegram';\nimport {fmt, link} from \"telegraf/format\";\nimport {getDraftsForUser} from \"../../../services/wildberriesService\";\nimport CacheService from '../../../utils/redis/Cache/Cache';\nimport LaravelService from \"../../../services/laravelService\";\nimport {authenticateUserService} from \"../../../services/authService\";\nimport {sendDateSelection} from \"./actions/autoBookingActions\";\nimport { v4 as uuidv4 } from 'uuid';\nimport {cabinetGate} from \"../../utils/cabinetGate\";\nimport bot from \"../../controllers/telegramController\";\n\nconst nameHandler = new Composer<MyContext>();\nconst phoneHandler = new Composer<MyContext>();\nnameHandler.on('text', async (ctx) => {\n    const name = ctx.message.text;\n    ctx.scene.session.cabinetForm.name = name;\n    const keyboard = Markup.inlineKeyboard([\n        Markup.button.callback('👌 Главное меню', 'mainmenu'),\n    ]);\n    const message = \"👇🏻Введите номер телефона\";\n\n\n    await ctx.reply(message, keyboard);\n\n    return ctx.wizard.next();\n})\n\nphoneHandler.on('text', async (ctx) => {\n    const input = ctx.message.text;\n\n    // Step 1: Extract all digits from the input\n    const digits = input.replace(/\\D/g, '');\n\n    // Step 2: Validate the number of digits\n    if (digits.length < 10) {\n        await ctx.reply('❌ Пожалуйста, введите действительный номер телефона с 10 цифрами.');\n        return;\n    }\n\n    // Step 3: Extract the last 10 digits\n    const phoneNumber = digits.slice(-10);\n\n    // Step 4: Save the validated phone number\n    ctx.scene.session.cabinetForm.phoneNumber = phoneNumber;\n\n    // Proceed with the next step\n    await createCabinetSend(ctx);\n});\n\n\n\nconst createCabinetSend = async (ctx: any) => { // Replace 'any' with the correct type\n    const keyboard = Markup.inlineKeyboard([\n        Markup.button.callback('👌 Главное меню', 'mainmenu'),\n    ]);\n\n    try {\n        const credentials = {\n            phone: ctx.scene.session.cabinetForm.phoneNumber as string,\n            name: ctx.scene.session.cabinetForm.name as string,\n        };\n\n        const user_id = uuidv4();\n        const telegram_id = ctx.from.id as string;\n\n        // Enqueue the authentication job\n        const authResult = await authenticateUserService({ userId: user_id, telegramId: telegram_id, credentials });\n\n        if (!authResult.success) {\n            throw new Error(authResult.message);\n        }\n\n        await ctx.wizard.next();\n        // Inform the user that the job has started\n        await ctx.reply('🚀 Мы начали процесс аутентификации. \\n Пожалуйста, ожидайте сообщений.');\n    } catch (error: any) {\n        console.log('Error authenticateUserService:', error.message);\n        await ctx.reply('❌ Ошибка создания кабинета', keyboard);\n        return ctx.scene.leave();\n    }\n\n    return;\n};\n\nconst codeHandler = new Composer<MyContext>();\n\ncodeHandler.on('text', async (ctx) => {\n    const text = ctx.message.text;\n\n    if (!/^\\d{6}$/.test(text)) {\n        await ctx.reply('❌ Некорректный код. Пожалуйста, введите 6 цифр.');\n        return;\n    }\n\n    const channel = `verification_code_channel_${ctx.from.id}`;\n    const message = {\n        code: text,\n        telegramId: ctx.from.id,\n        action: 'collect_verification_code',\n    };\n\n    await CacheService.pushToChannel(channel, JSON.stringify(message));\n\n    //Ждем ответа от сервиса\n    return;\n});\n\n\nconst cabinetWizzard = new Scenes.WizardScene<MyContext>(\n    'createCabinetWizzard',\n    // Step 1: Show subscription options\n    async (ctx) => {\n        const keyboard = Markup.inlineKeyboard([\n            Markup.button.callback('👌 Главное меню', 'mainmenu'),\n        ]);\n\n        ctx.scene.session.cabinetForm = {\n            name: null,\n            phoneNumber: null,\n        }\n\n        const message = fmt`🫡 Введите название кабинета`\n\n        try {\n            await ctx.editMessageText(message, {\n                ...keyboard, // Spread the keyboard markup\n                link_preview_options: {\n                    is_disabled: true\n                },\n            });\n            await ctx.answerCbQuery('🚀 Создайте кабинет');\n        } catch (error) {\n            logger.error('Error sending autobooking message:', error);\n            await ctx.reply(message, keyboard);\n        }\n\n        return ctx.wizard.next();\n    },\n    nameHandler,\n    phoneHandler,\n    codeHandler,\n);\n\n\ncabinetWizzard.command('start', async (ctx) => {\n    await ctx.scene.enter('main');\n});\n\ncabinetWizzard.action('continue_autobooking', async (ctx: MyContext) => {\n    await cabinetGate(ctx, 'autoBookingWizard');\n});\n\n// Export the scene\nexport default cabinetWizzard;\n","import { Scenes, Markup } from 'telegraf';\nimport { MyContext } from '../../types/MyContext';\nimport CacheService from '../../../utils/redis/Cache/Cache';\nimport { fmt, link } from 'telegraf/format';\nimport logger from '../../../utils/logger/loggerTelegram';\nimport {searchRequestsScene} from \"./searchRequestsScene\";\nimport LaravelService from \"../../../services/laravelService\";\nimport {cabinetGate} from \"../../utils/cabinetGate\";\n\nexport const mainScene = new Scenes.BaseScene<MyContext>('main');\n\n// Define the enter handler\nmainScene.enter(async (ctx: MyContext) => {\n    const messageText = `⚡Я автоматически нахожу и бронирую доступные слоты на складах Wildberries. Выбирайте удобный тариф и бронируйте поставки.\n\nВыберите пункт в меню 👇`;\n\n    const mainMenuKeyboard = Markup.inlineKeyboard([\n        [\n            Markup.button.callback('📦 Автобронирование', 'autobooking')\n        ],\n        [\n            Markup.button.callback('⚡ Поиск слотов', 'searchslots'),\n            Markup.button.callback('🙌 Мои кабинеты', 'cabinets'),\n        ],\n        [\n            Markup.button.callback('📝 Мои задания', 'searchrequests'),\n\n        ],\n        [\n            Markup.button.callback('💎 Подписка', 'payments'),\n            Markup.button.url('💬 Поддержка', 'https://t.me/helpybot_support'),\n        ],\n        [\n            Markup.button.url('📍 Инструкции', 'http://surl.li/awdppl')\n        ]\n    ]);\n\n    if (ctx.callbackQuery && ctx.callbackQuery.message) {\n        try {\n            // If the interaction is from a callback query, edit the existing message\n            await ctx.editMessageText(messageText, mainMenuKeyboard);\n        }\n        catch (error) {\n            await ctx.reply(messageText, mainMenuKeyboard);\n        }\n    } else {\n        // Otherwise, send a new message\n        await ctx.reply(messageText, mainMenuKeyboard);\n    }\n\n});\n\n// Handle 'autobooking' action\nmainScene.action('autobooking', async (ctx: MyContext) => {\n    await cabinetGate(ctx, 'autoBookingWizard');\n});\n\nmainScene.action('searchrequests', async (ctx: MyContext) => {\n    await ctx.scene.enter('searchRequests');\n});\n\nmainScene.action('searchslots', async (ctx: MyContext) => {\n    await ctx.scene.enter('searchSlotsWizard');\n});\n\nmainScene.action('cabinets', async (ctx: MyContext) => {\n    await cabinetGate(ctx, 'showCabinetsScene');\n})\n","import {Scenes, Markup, Composer} from 'telegraf';\nimport {MyContext, ReauthState} from '../../types/MyContext';\nimport logger from '../../../utils/logger/loggerTelegram';\nimport {fmt, link} from \"telegraf/format\";\nimport {getDraftsForUser} from \"../../../services/wildberriesService\";\nimport CacheService from '../../../utils/redis/Cache/Cache';\nimport LaravelService from \"../../../services/laravelService\";\nimport {authenticateUserService} from \"../../../services/authService\";\nimport {sendDateSelection} from \"./actions/autoBookingActions\";\nimport { v4 as uuidv4 } from 'uuid';\nimport {cabinetGate} from \"../../utils/cabinetGate\";\nimport bot from \"../../controllers/telegramController\";\n\nconst codeHandler = new Composer<MyContext>();\n\ncodeHandler.on('text', async (ctx) => {\n    const text = ctx.message.text;\n\n    if (!/^\\d{6}$/.test(text)) {\n        await ctx.reply('❌ Некорректный код. Пожалуйста, введите 6 цифр.');\n        return;\n    }\n\n    const channel = `verification_code_channel_${ctx.from.id}`;\n    const message = {\n        code: text,\n        telegramId: ctx.from.id,\n        action: 'collect_verification_code',\n    };\n\n    await CacheService.pushToChannel(channel, JSON.stringify(message));\n    //Ждем ответа от сервиса\n    return;\n});\n\n\nconst cabinetReauthWizzard = new Scenes.WizardScene<MyContext>(\n    'reauthCabinetWizzard',\n    // Step 1: Show subscription options\n    async (ctx) => {\n        const state = ctx.scene.state as ReauthState;\n        const cabinet = state.cabinet;\n        const keyboard = Markup.inlineKeyboard([\n            Markup.button.callback('👌 Главное меню', 'mainmenu'),\n        ]);\n\n        try {\n            const credentials = {\n                phone: cabinet.settings.phone_number as string,\n                name: cabinet.name as string,\n            };\n\n            // Save the credentials to the cache so we can update cabinet later\n            await CacheService.set(`reauth_cabinet_${ctx.from.id}`, JSON.stringify({cabinet}));\n\n            const user_id = uuidv4();\n            const telegram_id = ctx.from.id as unknown as string;\n\n            // Enqueue the authentication job\n            const authResult = await authenticateUserService({ userId: user_id, telegramId: telegram_id, credentials });\n\n            if (!authResult.success) {\n                throw new Error(authResult.message);\n            }\n\n            // Inform the user that the job has started\n            await ctx.reply('🚀 Мы получили вашу информацию и начали процесс аутентификации. Пожалуйста, ожидайте сообщений.', keyboard);\n            await ctx.answerCbQuery('🚀 Создание кабинета началось');\n        } catch (error: any) {\n            console.log('Error authenticateUserService:', error.message);\n            await ctx.reply('❌ Ошибка создания кабинета', keyboard);\n            return ctx.scene.leave();\n        }\n\n        return ctx.wizard.next();\n    },\n    codeHandler,\n);\n\n\ncabinetReauthWizzard.command('start', async (ctx) => {\n    await ctx.scene.enter('main');\n});\n\n// Export the scene\nexport default cabinetReauthWizzard;\n","// src/scenes/searchRequestsScene.ts\n\nimport { Scenes, Markup } from 'telegraf';\nimport {MyContext} from '../../types/MyContext';\nimport CacheService from '../../../utils/redis/Cache/Cache';\nimport logger from '../../../utils/logger/loggerTelegram';\nimport laravelService from '../../../services/laravelService';\nimport {bold, fmt} from \"telegraf/format\";\nimport {BOX_TYPES, BOX_TYPES_TEXT_ONLY, COEFFICIENTS_TEXT_ONLY, WAREHOUSES} from \"../../../utils/wildberries/consts\"; // Adjust the import path if necessary\n\nexport const searchRequestsScene = new Scenes.BaseScene<MyContext>('searchRequests');\n\nconst listBookingRequests = async (ctx: MyContext, type: string = 'booking') => {\n    // Initialize page number in session if not set\n    if (!ctx.session.searchRequestsPage) {\n        ctx.session.searchRequestsPage = 1;\n    }\n\n    logger.info('Entered searchRequestsScene', { session: ctx.scene.session });\n\n    const currentPage = ctx.session.searchRequestsPage;\n    const perPage = 1; // As per your requirement\n\n    const typeText = type == 'booking' ? 'автобронь' : 'поиск слотов';\n\n    const messageTextHeader = `🫡 Список активных заявок на ${typeText} (Страница ${currentPage})`;\n\n    try {\n        // Fetch paginated notifications\n        const paginatedNotifications = await laravelService.getNotificationsByTelegramId(\n            ctx.from.id,\n            currentPage,\n            perPage,\n            type\n        );\n\n        if (!paginatedNotifications || paginatedNotifications.data.length === 0) {\n            const noNotificationsText = `📭 У вас нет активных заявок на ${typeText}.`;\n            const noKeyboard = Markup.inlineKeyboard([\n                    [Markup.button.callback('👈 Назад', 'reenter')],\n                    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n            ]);\n\n            if (ctx.callbackQuery && ctx.callbackQuery.message) {\n                await ctx.editMessageText(noNotificationsText, noKeyboard);\n            } else {\n                await ctx.reply(noNotificationsText, noKeyboard);\n            }\n\n            return;\n        }\n\n        let notification;\n        try {\n            notification = paginatedNotifications.data[0];\n        }\n        catch (error) {\n            logger.error('Error getting notifications:', error);\n            await ctx.answerCbQuery('Произошла ошибка [0]', {\n                show_alert: true,\n            });\n            return;\n        }\n\n        const warehouseName = WAREHOUSES[notification.settings.warehouseId];\n        const boxTypeName = BOX_TYPES_TEXT_ONLY[notification.settings.boxTypeId];\n        const dateText = notification.settings.checkUntilDate;\n        const coefficientName = COEFFICIENTS_TEXT_ONLY[notification.settings.coefficient];\n        // Format the notification message\n        const messageTextBooking = fmt`\n🫡 ${bold`Список активных заявок на ${typeText}`}\n\n${bold`Номер автоброни:`} ${notification.settings.preorderId}\n${bold`Кабинет:`} ${notification.cabinet?.name ?? 'Не указан'}\n${bold`Склад:`} ${warehouseName} \n${bold`Тип упаковки:`} ${boxTypeName} \n${bold`Время:`} ${dateText}\n${bold`Коэффициент:`} ${coefficientName}\n${bold`Статус:`} ${notification.status === 'started' ? 'ищем' : (notification.status === 'finished' ? 'нашли' : 'вышло время')}\n\nСтраница: ${currentPage} из ${paginatedNotifications.last_page}\n`;\n        const messageTextSearch = fmt`\n🫡 ${bold`Список активных заявок на ${typeText}`}\n\n${bold`Номер поисковой заявки:`} ${notification.id}\n${bold`Склад:`} ${warehouseName} \n${bold`Тип упаковки:`} ${boxTypeName} \n${bold`Время:`} ${dateText}\n${bold`Коэффициент:`} ${coefficientName}\n${bold`Статус:`} ${notification.status === 'started' ? 'ищем' : (notification.status === 'finished' ? 'нашли' : 'вышло время')}\n\nСтраница: ${currentPage} из ${paginatedNotifications.last_page}\n`;\n        const messageText = type === 'booking' ? messageTextBooking : messageTextSearch;\n\n\n        // Build pagination buttons\n        const buttons = [];\n\n        const buttonsPagination = [];\n\n        if (paginatedNotifications.prev_page_url) {\n            buttonsPagination.push(Markup.button.callback('⬅️', 'notifications_prev'));\n        }\n\n        if (paginatedNotifications.next_page_url) {\n            buttonsPagination.push(Markup.button.callback('➡️', 'notifications_next'));\n        }\n\n        const buttonDelete = Markup.button.callback('❌ Удалить', 'delete_' + notification.id);\n\n        buttons.push([buttonDelete]);\n        buttons.push(buttonsPagination);\n\n        // Always show 'Main Menu' button\n        buttons.push([Markup.button.callback('👈 Назад', 'reenter')]);\n        buttons.push([Markup.button.callback('👌 Главное меню', 'mainmenu')]);\n\n        const keyboard = Markup.inlineKeyboard(buttons, { columns: 3 });\n\n        if (ctx.callbackQuery && ctx.callbackQuery.message) {\n           try {\n               // Edit existing message if interaction is from a callback query\n               await ctx.editMessageText(messageText, {\n                   ...keyboard,\n                   parse_mode: 'HTML',\n               });\n           } catch (error) {\n               logger.error('Error sending notifications message:', error);\n               await ctx.reply(messageText, {\n                   ...keyboard,\n                   parse_mode: 'HTML',\n               });\n           }\n        } else {\n            // Otherwise, send a new message\n            await ctx.reply(messageText, {\n                ...keyboard,\n                parse_mode: 'Markdown',\n            });\n        }\n    } catch (error) {\n        logger.error('Error getting notifications:', error);\n        await ctx.answerCbQuery('Произошла ошибка при получении заявок.', {\n            show_alert: true,\n        });\n    }\n}\n\nconst listSearchRequests = async (ctx: MyContext) => {\n   await listBookingRequests(ctx, 'search');\n}\n\nsearchRequestsScene.enter(async (ctx: MyContext) => {\n    const messageText = `🫡 Выберите тип заявок для просмотра:`;\n    const keyboard = Markup.inlineKeyboard([\n        [\n            Markup.button.callback('🔍 Поиск', 'search'),\n            Markup.button.callback('🚚 Автобронь', 'booking')\n        ],\n        [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n    ]);\n\n    if (ctx.callbackQuery && ctx.callbackQuery.message) {\n        try {\n            await ctx.editMessageText(messageText, keyboard);\n        } catch (error) {\n            logger.error('Error sending search requests message:', error);\n            await ctx.reply(messageText, keyboard);\n        }\n    } else {\n        await ctx.reply(messageText, keyboard);\n    }\n});\n\nconst searchAction = async (ctx: MyContext) => {\n    await listSearchRequests(ctx);\n}\n\nconst bookingAction = async (ctx: MyContext) => {\n    await listBookingRequests(ctx);\n}\n\nsearchRequestsScene.action('search', async (ctx: MyContext) => {\n    ctx.session.searchRequestsPage = 1; // Reset page number\n    ctx.session.searchRequestsType = 'search';\n    await CacheService.forgetByPattern(`notifications_telegram_id_${ctx.from.id}_page_*`)\n    await searchAction(ctx);\n});\n\nsearchRequestsScene.action('booking', async (ctx: MyContext) => {\n    ctx.session.searchRequestsPage = 1; // Reset page number\n    ctx.session.searchRequestsType = 'booking';\n    await CacheService.forgetByPattern(`notifications_telegram_id_${ctx.from.id}_page_*`)\n    await bookingAction(ctx);\n});\n\n\n// Handle 'Next' button callback\nsearchRequestsScene.action('notifications_next', async (ctx: MyContext) => {\n    if (ctx.session.searchRequestsPage) {\n        logger.info('Incrementing page number');\n        ctx.session.searchRequestsPage += 1;\n\n        if (ctx.session.searchRequestsType === 'booking') {\n            await bookingAction(ctx);\n        }\n        else {\n            await searchAction(ctx);\n        }\n    } else {\n        logger.warn('Page number not set');\n        // If for some reason the page isn't set, reset to page 1\n        ctx.session.searchRequestsPage = 1;\n        await ctx.scene.reenter();\n    }\n});\n\n// Handle 'Previous' button callback\nsearchRequestsScene.action('notifications_prev', async (ctx: MyContext) => {\n    if (ctx.session.searchRequestsPage && ctx.session.searchRequestsPage > 1) {\n        ctx.session.searchRequestsPage -= 1;\n\n        if (ctx.session.searchRequestsType === 'booking') {\n            await bookingAction(ctx);\n        }\n        else {\n            await searchAction(ctx);\n        }\n    } else {\n        await ctx.answerCbQuery('Вы уже на первой странице.', { show_alert: true });\n    }\n});\n\nsearchRequestsScene.action(/delete_(.*)/, async (ctx) => {\n    const notificationId = ctx.match[1];\n    try {\n        await laravelService.deleteNotification(notificationId);\n        await ctx.answerCbQuery('Заявка удалена', { show_alert: true });\n        await ctx.scene.reenter();\n    } catch (error) {\n        logger.error('Error deleting notification:', error);\n        await ctx.answerCbQuery('Произошла ошибка при удалении заявки.', { show_alert: true });\n    }\n});\n\n\nsearchRequestsScene.action('reenter', async (ctx: MyContext) => {\n    await ctx.scene.reenter();\n});","import { Scenes, Markup, Composer } from 'telegraf';\nimport { MyContext, AutoBookingState } from '../../types/MyContext';\nimport logger from '../../../utils/logger/loggerTelegram';\nimport LaravelService from \"../../../services/laravelService\";\nimport {\n    sendDraftSelection,\n    sendWarehouseSelection,\n    sendCoefficientSelection,\n    sendBoxTypeSelection,\n    sendDateSelection,\n    sendOrderConfirmation,\n    sendFinalConfirmation,\n    sendErrorMessage, sendCustomDatePrompt, sendPalletCountPrompt, sendSearchSlotMessage,\n} from './actions/autoBookingActions';\nimport {fmt} from \"telegraf/format\";\nimport {cabinetGate} from \"../../utils/cabinetGate\";\n\n// Default buttons with Back and Main Menu\nconst defaultButtons = [\n    [Markup.button.callback('👈 Назад', 'back')],\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n];\n\nconst handleWarehouseSelection = new Composer<MyContext>();\nhandleWarehouseSelection.action(/select_warehouse_(.+)/, async (ctx) => {\n    const warehouseId = ctx.match[1];\n    ctx.session.autobookingForm.warehouseId = warehouseId;\n    await sendCoefficientSelection(ctx);\n    return ctx.wizard.next();\n});\n\nconst handleCoefficientSelection = new Composer<MyContext>();\nhandleCoefficientSelection.action(/wh_coefficient_set_(.+)/, async (ctx) => {\n    const coefficient = ctx.match[1];\n    ctx.session.autobookingForm.coefficient = coefficient;\n    await sendBoxTypeSelection(ctx);\n    return ctx.wizard.next();\n});\n\nconst handleBoxTypeSelection = new Composer<MyContext>();\nhandleBoxTypeSelection.action(/wh_box_type_set_(.+)/, async (ctx) => {\n    const boxType = ctx.match[1];\n    ctx.session.autobookingForm.boxTypeId = boxType;\n\n    await sendDateSelection(ctx);\n    return ctx.wizard.next();\n});\n\nconst handleDateSelection = new Composer<MyContext>();\nhandleDateSelection.action(/wh_date_set_(.+)/, async (ctx) => {\n    const date = ctx.match[1];\n    console.log('date', date);\n    if (date === 'customdates') {\n        await sendCustomDatePrompt(ctx); // Send prompt for custom dates\n        return ctx.wizard.next(); // Move to handleCustomDateInput step\n    } else {\n        await sendOrderConfirmation(ctx, date);\n        return ctx.wizard.selectStep(ctx.wizard.cursor + 2); // Skip custom date input step\n    }\n});\n\nconst handleCustomDateInput = new Composer<MyContext>();\nhandleCustomDateInput.on('text', async (ctx) => {\n    const input = ctx.message.text;\n    const dates = input.split(',').map(date => date.trim());\n\n    // Regular expression to match YYYY.MM.DD format\n    const dateRegex = /^\\d{4}\\.\\d{2}\\.\\d{2}$/;\n\n    // Find dates that do not match the regex\n    const invalidFormatDates = dates.filter(date => !dateRegex.test(date));\n\n    if (invalidFormatDates.length > 0) {\n        const errorMessage = fmt`❌ Некорректный формат даты: ${invalidFormatDates.join(', ')}.\nПожалуйста, введите даты в формате ГГГГ.ММ.ДД, разделяя их запятыми. Например:\n• 2025.08.10, 2025.08.12`;\n\n        // Send the error message with the default navigation buttons\n        await ctx.reply(errorMessage, {\n            ...Markup.inlineKeyboard([...defaultButtons]),\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n\n        return; // Stay on the current step\n    }\n\n    // Optional: Further validate if the dates are actual calendar dates\n    const invalidDates = [];\n    const validDates = [];\n\n    dates.forEach(dateStr => {\n        const [year, month, day] = dateStr.split('.').map(Number);\n        const dateObj = new Date(year, month - 1, day);\n        if (\n            dateObj.getFullYear() === year &&\n            dateObj.getMonth() === month - 1 &&\n            dateObj.getDate() === day\n        ) {\n            validDates.push(dateStr);\n        } else {\n            invalidDates.push(dateStr);\n        }\n    });\n\n    if (invalidDates.length > 0) {\n        const errorMessage = fmt`❌ Некорректные даты: ${invalidDates.join(', ')}.\nПожалуйста, убедитесь, что введённые даты существуют и находятся в формате ГГГГ.ММ.ДД.`;\n\n        // Send the error message with the default navigation buttons\n        await ctx.reply(errorMessage, {\n            ...Markup.inlineKeyboard([...defaultButtons]),\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n\n        return; // Stay on the current step\n    }\n\n    // If all dates are valid, save them to the session\n    ctx.session.autobookingForm.dates = validDates;\n\n    // Proceed to order confirmation\n    await sendOrderConfirmation(ctx, 'customdates');\n    return ctx.wizard.next();\n});\n\nconst handleOrderConfirmation = new Composer<MyContext>();\nhandleOrderConfirmation.action('confirm_order', async (ctx) => {\n    await sendFinalConfirmation(ctx);\n    return;\n});\n\n// Define the wizard scene\nconst searchSlotsWizard = new Scenes.WizardScene<MyContext>(\n    'searchSlotsWizard',\n    async (ctx) => {\n        ctx.session.page = 1;\n        ctx.session.autobookingForm = {\n            draftId: null,\n            cabinetId: null,\n\n            warehouseId: null,\n            coefficient: null,\n            dates: [],\n            checkUntilDate: null,\n            boxTypeId: null,\n\n            monopalletCount: null,\n            isBooking: false,\n        };\n\n\n        await sendSearchSlotMessage(ctx);\n        return ctx.wizard.next();\n    },\n    async (ctx) => {\n       await sendWarehouseSelection(ctx);\n       return ctx.wizard.next();\n    },\n    handleWarehouseSelection,\n    handleCoefficientSelection,\n    handleBoxTypeSelection,\n    handleDateSelection,\n    handleCustomDateInput,\n    handleOrderConfirmation,\n);\n\n// Handle actions outside the wizard\nsearchSlotsWizard.action('mainmenu', async (ctx) => {\n    await ctx.scene.enter('main');\n    await ctx.answerCbQuery('👌 Главное меню');\n});\n\nsearchSlotsWizard.action('back', async (ctx) => {\n\n    const state = ctx.scene.state as AutoBookingState;\n\n    // Так как у нас есть дополнительный шаг - ввод кастомной даты\n    ctx.wizard.back();\n\n    await ctx.answerCbQuery('👈 Назад');\n\n    // Determine the new current step\n    const currentStep = ctx.wizard.cursor;\n\n    logger.info(`Navigated back to step ${currentStep}`);\n\n    // Call the appropriate send function based on the current step\n    switch (currentStep) {\n        case 1:\n            // Initial step: sendSearchSlotMessage\n            await sendSearchSlotMessage(ctx);\n            break;\n        case 2:\n            // After Draft Selection: sendWarehouseSelection\n            await sendWarehouseSelection(ctx);\n            break;\n        case 3:\n            // After Warehouse Selection: sendCoefficientSelection\n            await sendCoefficientSelection(ctx);\n            break;\n        case 4:\n            // After Coefficient Selection: sendBoxTypeSelection\n            await sendBoxTypeSelection(ctx);\n            break;\n        case 5:\n            // After Box Type Selection: sendDateSelection\n            await sendDateSelection(ctx);\n            break;\n        case 6:\n            // After Date Selection (either standard or custom): sendDateSelection\n            // currentStep is 7 because of the custom date input step, but we want to skip it to let user re-enter dates\n            ctx.wizard.selectStep(5);\n            await sendDateSelection(ctx);\n            break;\n        case 7:\n            // After Date Selection: sendOrderConfirmation\n            await sendOrderConfirmation(ctx, ctx.session.autobookingForm.checkUntilDate || 'customdates');\n            break;\n        default:\n            logger.warn(`Unhandled step ${currentStep} in back action`);\n            await sendErrorMessage(ctx, 'Неизвестный шаг. Пожалуйста, попробуйте снова.');\n            break;\n    }\n});\n\nsearchSlotsWizard.command('start', async (ctx) => {\n    await ctx.scene.enter('main');\n});\n\nsearchSlotsWizard.action('warehouses_next', async (ctx: MyContext) => {\n    if (ctx.session.page) {\n        logger.info('Incrementing page number');\n        ctx.session.page += 1;\n        await sendWarehouseSelection(ctx);\n    } else {\n        logger.warn('Page number not set');\n        ctx.session.page = 1;\n        await ctx.scene.reenter();\n    }\n});\n\nsearchSlotsWizard.action('warehouses_prev', async (ctx: MyContext) => {\n    if (ctx.session.page && ctx.session.page > 1) {\n        ctx.session.page -= 1;\n        await sendWarehouseSelection(ctx);\n    } else {\n        await ctx.answerCbQuery('Вы уже на первой странице.', { show_alert: true });\n    }\n});\n\nsearchSlotsWizard.command('autobooking', async (ctx: MyContext) => {\n    await cabinetGate(ctx, 'autoBookingWizard');\n});\n\n// Export the scene\nexport default searchSlotsWizard;","import { Scenes, Markup, Composer } from 'telegraf';\nimport { MyContext, AutoBookingState } from '../../types/MyContext';\nimport logger from '../../../utils/logger/loggerTelegram';\nimport LaravelService from \"../../../services/laravelService\";\nimport {\n    sendDraftSelection,\n    sendWarehouseSelection,\n    sendCoefficientSelection,\n    sendBoxTypeSelection,\n    sendDateSelection,\n    sendOrderConfirmation,\n    sendFinalConfirmation,\n    sendErrorMessage, sendCustomDatePrompt, sendPalletCountPrompt, sendSearchSlotMessage,\n} from './actions/autoBookingActions';\nimport {bold, fmt} from \"telegraf/format\";\nimport {cabinetGate} from \"../../utils/cabinetGate\";\nimport {getDraftsForUser} from \"../../../services/wildberriesService\";\n\n// Default buttons with Back and Main Menu\nconst defaultButtons = [\n    [Markup.button.callback('👈 Назад', 'back')],\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n];\n\nconst defaultButtonsMenuOnly = [\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n];\n\nconst defaultButtonsAuth = [\n    [Markup.button.callback('🔐 Авторизация', 'auth')],\n    [Markup.button.callback('👈 Назад', 'back')],\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n];\n\nconst sendListCabinets = async (ctx: MyContext) => {\n\n    let user = null;\n    let state = ctx.scene.state as AutoBookingState;\n    user = state.user;\n\n    const cabinets = user.cabinets;\n\n    const cabinetsButtons = cabinets.map((cabinet) => {\n        const cabinetStatus = cabinet.settings.is_active ? '🟢' : '🔴';\n        return [Markup.button.callback(`${cabinetStatus} ${cabinet.name}`, `select_cabinet_${cabinet.id}`)];\n    });\n\n    const keyboard = Markup.inlineKeyboard(\n        [...cabinetsButtons,\n            [Markup.button.callback('➕ Добавить кабинет', 'create_cabinet')],\n            ...defaultButtonsMenuOnly]\n    );\n\n    try {\n        await ctx.editMessageText('🫡 Список ваших кабинетов', keyboard);\n    } catch (error) {\n        logger.error('Error showing cabinets:', error);\n        await ctx.reply('🫡 Список ваших кабинетов', keyboard);\n        return;\n    }\n};\n\nconst showCabinet = async (ctx: MyContext, cabinetId: string) => {\n    const state = ctx.scene.state as AutoBookingState;\n\n    ctx.scene.session.selectedCabinetId = cabinetId;\n\n    const user = state.user;\n    const cabinet = user.cabinets.find(cabinet => cabinet.id == cabinetId);\n\n    if (!cabinet) {\n        await sendErrorMessage(ctx, 'Кабинет не найден');\n        return;\n    }\n\n    let actionButton = [];\n    if(cabinet.settings.is_active) {\n        actionButton = [Markup.button.callback('🔍 Проверить подключение', 'check_connection_' + cabinet.settings.cabinet_id)]\n    } else {\n        actionButton = [Markup.button.callback('🔐 Авторизация', 'auth')]\n    }\n    const keyboard = Markup.inlineKeyboard([\n        actionButton,\n        [Markup.button.callback('❌ Удалить', 'delete_cabinet_' + cabinet.id)],\n        [Markup.button.callback('👈 Назад', 'back')],\n        [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n    ]);\n\n\n\n    const message = fmt`🫡 ${bold(`Ваш кабинет`)}\n    \n📝Название кабинета — ${cabinet.name}\nСтатус — ${cabinet.settings.is_active ? '🟢 Активен' : '🔴 Не активен'}\n`;\n\n\n    try {\n        await ctx.editMessageText(message, keyboard);\n    } catch (error) {\n        logger.error('Error showing cabinet:', error);\n        await ctx.reply(message, keyboard);\n        return;\n    }\n};\n\nconst handleCabinetSelection = new Composer<MyContext>();\nhandleCabinetSelection.action(/select_cabinet_(.+)/, async (ctx) => {\n    const cabinetId = ctx.match[1];\n    await showCabinet(ctx, cabinetId);\n    return ctx.wizard.next();\n});\n\n// Define the wizard scene\nconst showCabinetsScene = new Scenes.WizardScene<MyContext>(\n    'showCabinetsScene',\n    async (ctx) => {\n        await sendListCabinets(ctx);\n        return ctx.wizard.next();\n    },\n    handleCabinetSelection,\n);\n\n// Handle actions outside the wizard\nshowCabinetsScene.action('mainmenu', async (ctx) => {\n    await ctx.scene.enter('main');\n    await ctx.answerCbQuery('👌 Главное меню');\n});\n\nshowCabinetsScene.action('back', async (ctx) => {\n\n    const state = ctx.scene.state as AutoBookingState;\n\n    // Так как у нас есть дополнительный шаг - ввод кастомной даты\n    ctx.wizard.back();\n\n    await ctx.answerCbQuery('👈 Назад');\n\n    // Determine the new current step\n    const currentStep = ctx.wizard.cursor;\n\n    logger.info(`Navigated back to step ${currentStep}`);\n\n    // Call the appropriate send function based on the current step\n    switch (currentStep) {\n        case 1:\n            // Initial step: sendListCabinets\n            await sendListCabinets(ctx);\n            break;\n        default:\n            logger.warn(`Unhandled step ${currentStep} in back action`);\n            await sendErrorMessage(ctx, 'Неизвестный шаг. Пожалуйста, попробуйте снова.');\n            break;\n    }\n});\n\nshowCabinetsScene.command('start', async (ctx) => {\n    await ctx.scene.enter('main');\n});\n\nshowCabinetsScene.action('create_cabinet', async (ctx) => {\n    await ctx.scene.enter('createCabinetWizzard');\n});\n\nshowCabinetsScene.action(/delete_cabinet_(.+)/, async (ctx) => {\n    const cabinetId = ctx.match[1];\n\n    try {\n        await LaravelService.deleteCabinetByTelegramId(ctx.from.id, cabinetId);\n        await ctx.answerCbQuery('Кабинет удален', {\n            show_alert: true,\n        });\n        await ctx.scene.enter('main');\n        // await cabinetGate(ctx, 'showCabinetsScene');\n    } catch (error) {\n        await sendErrorMessage(ctx, '❌ Ошибка удаления кабинета');\n        return;\n    }\n    return;\n})\n\nshowCabinetsScene.action(/check_connection_(.+)/, async (ctx) => {\n    const cabinetId = ctx.match[1];\n\n    const cabinetIdDb = ctx.scene.session.selectedCabinetId;\n    console.log('cabinetId', cabinetId)\n    try {\n       \n        const response = await getDraftsForUser(cabinetId);\n        await ctx.answerCbQuery(`Подключение успешно. \\nОбнаружено ${response.length} черновиков`, {\n            show_alert: true,\n        });\n    } catch (error) {\n        try {\n            const state = ctx.scene.state as AutoBookingState;\n\n            const cabinet = state.user.cabinets.find(cabinet => cabinet.id == cabinetIdDb);\n            cabinet.settings.state_path = null;\n            cabinet.settings.is_active = false;\n\n            await LaravelService.updateCabinetByTelegramId(ctx.from.id, cabinetIdDb, {name: cabinet.name, settings: cabinet.settings});\n        } catch (error) {\n            console.log('Error updating cabinet:', error);\n            await sendErrorMessage(ctx, '❌ Ошибка обновления кабинета');\n            return;\n        }\n\n        const errorMsg = '❌ Ошибка подключения, пожалуйста, авторизуйтесь заново.';\n        const keyboard = Markup.inlineKeyboard([...defaultButtonsAuth]);\n\n        try {\n            await ctx.editMessageText(errorMsg, {\n                ...keyboard,\n                link_preview_options: {\n                    is_disabled: true\n                },\n            });\n        } catch (error) {\n            logger.error('Error sending error message:', error);\n            await ctx.reply(errorMsg, keyboard);\n        }\n        return;\n    }\n\n    return;\n});\n\nshowCabinetsScene.action('auth', async (ctx) => {\n    const state = ctx.scene.state as AutoBookingState;\n    const cabinetId = ctx.scene.session.selectedCabinetId;\n    const cabinet = state.user.cabinets.find(cabinet => cabinet.id == cabinetId);\n\n    await ctx.scene.enter('reauthCabinetWizzard', {cabinet});\n});\n\nexport default showCabinetsScene;","import {Scenes, Markup, Composer} from 'telegraf';\nimport { MyContext } from '../../types/MyContext';\nimport logger from '../../../utils/logger/loggerTelegram';\n\n\nconst defaultButtons = [\n    [Markup.button.callback('👈 Назад', 'back')],\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n];\nconst tariffHandler = new Composer<MyContext>();\ntariffHandler.action(/tariff_\\d+/, async (ctx) => {\n    logger.info('Tariff selected:', { tariffId: ctx.match.input });\n    logger.info('Received update', { update: ctx.update });\n    const tariffId = ctx.match.input.split('_')[1];\n    ctx.session.selectedTariff = tariffId;\n\n    await ctx.answerCbQuery('😎 Выбран тариф' + tariffId);\n\n    logger.info('entered confirm payment');\n    try {\n        // Simulate payment confirmation\n        // In reality, you would handle this via a webhook endpoint\n        const paymentSuccessful = true; // Replace with actual payment status\n\n        if (paymentSuccessful) {\n            // Update session or database as needed\n            ctx.session.count = (ctx.session.count || 0) + 1;\n\n           // answer notification\n            await ctx.answerCbQuery('Оплата прошла успешно!', {\n                show_alert: true,\n            });\n\n            return ctx.scene.enter('subscriptionWizard');\n        } else {\n            await ctx.editMessageText('Оплата не прошла. Пожалуйста, попробуйте снова.');\n            await ctx.scene.enter('subscriptionWizard');\n            return ctx.scene.leave();\n        }\n    } catch (error) {\n        logger.error('Error confirming payment:', error);\n        await ctx.reply('Произошла ошибка при подтверждении оплаты. Пожалуйста, попробуйте позже.');\n\n        return ctx.scene.enter('main');\n    }\n});\n\nconst sendStartMessage = async (ctx: MyContext) => {\n    const message = `🫡 Подписка\nДоступно автообронирований: ${ctx.session.count || 0}\nВыберете необходимое кол-во автобронирований 🙌\n\n1 автобронь – 250₽  \n5 автоброней – 1.000₽  \n10 автоброней – 1.850₽  \n20 автоброней – 3.500₽  \n50 автоброней – 6.800₽`;\n\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('😎 Выбрать тариф', 'choose_tariff')],\n        [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n    ]);\n\n    if (ctx.callbackQuery && ctx.callbackQuery.message) {\n        // If the interaction is from a callback query, edit the existing message\n        await ctx.editMessageText(message, keyboard);\n        await ctx.answerCbQuery('💎 Подписка');\n    } else {\n        // Otherwise, send a new message\n        await ctx.reply(message, keyboard);\n    }\n\n}\n\nconst subscriptionWizard = new Scenes.WizardScene<MyContext>(\n    'subscriptionWizard',\n    // Step 1: Show subscription options\n    async (ctx) => {\n        await sendStartMessage(ctx);\n        return ctx.wizard.next();\n    },\n\n    // Step 2: Handle tariff selection\n    async (ctx) => {\n        // Игнорируем сообщения, не являющиеся callbackQuery\n        if (!ctx.callbackQuery) return undefined;\n\n        const tariffs = [\n            { id: 1, name: '1 автобронь', price: 250 },\n            { id: 5, name: '5 автоброней', price: 1000 },\n            { id: 10, name: '10 автоброней', price: 1850 },\n            { id: 20, name: '20 автоброней', price: 3500 },\n            { id: 50, name: '50 автоброней', price: 6800 },\n        ];\n\n        const webUrl = 'https://botcomment.xyz';\n\n        const tariffButtons = tariffs.map((tariff) => [\n            Markup.button.url(`${tariff.name} – ${tariff.price}₽`, `${webUrl}/payment_link/${ctx.from.id}/${tariff.id}`)\n        ]);\n\n\n\n        await ctx.editMessageText('🫡 Выберите тариф:', Markup.inlineKeyboard([ ...tariffButtons, ...defaultButtons]));\n        await ctx.answerCbQuery('😎 Выберите тариф');\n        return ctx.wizard.next();\n    },\n    tariffHandler,\n);\n\n// Handle actions within the wizard\nsubscriptionWizard.action('mainmenu', async (ctx) => {\n    await ctx.scene.enter('main');\n    await ctx.answerCbQuery('👌 Главное меню');\n});\n\nsubscriptionWizard.action('back', async (ctx) => {\n    await ctx.wizard.back();\n    await sendStartMessage(ctx);\n});\n\nsubscriptionWizard.command('start', async (ctx) => {\n    await ctx.scene.enter('main');\n});\n\n// Export the scene\nexport default subscriptionWizard;\n","import {Telegraf} from \"telegraf\";\nimport {MyContext} from \"../types/MyContext\";\n\nimport CacheService from '../../utils/redis/Cache/Cache';\nclass WarehouseBot {\n    private bot: Telegraf<MyContext>;\n    constructor(bot: Telegraf<MyContext>) {\n        this.bot = bot;\n    }\n\n    async handleStart(chatId: number) {\n        const message = \"⚡Я автоматически нахожу и бронирую доступные слоты на складах Wildberries. Выбирайте удобный тариф и бронируйте поставки.\" +\n            \"\\n\\nВыберите пункт в меню 👇\";\n\n        const keyboard = {\n            inline_keyboard: [\n                [\n                    { text: '📦 Автобронирование', callback_data: 'wh_notification' },\n                ],\n                [\n                    { text: '⚡ Поиск слотов', callback_data: 'wh_notification' },\n                    { text: '📝 Заявки на поиск слотов', callback_data: 'wh_notification' },\n                ],\n                [\n                    { text: '🙌 Мои кабинеты', callback_data: 'wh_payment' },\n                    { text: '💎 Подписка', callback_data: 'wh_payment' },\n                ],\n                [\n                    { text: '💬 Поддержка', url: 'https://t.me/dmitrynovikov21' },\n                    { text: '📍 Инструкции', url: 'https://t.me/dmitrynovikov21' },\n                ],\n            ],\n        };\n\n        await this.bot.telegram.sendMessage(chatId, message, {\n            parse_mode: 'HTML',\n            reply_markup: keyboard,\n        });\n    }\n\n    async fetchUserByTelegramId(telegramId: number) {\n        try {\n            return await CacheService.getUserByTelegramId(telegramId);\n        } catch (error) {\n            console.error('Error fetching user:', error);\n            return null;\n        }\n    }\n\n    // Implement other methods like handleNotification, handlePayment, etc.\n}\n\nexport default WarehouseBot;\n","import LaravelService from \"../../services/laravelService\";\nimport logger from \"../../utils/logger/loggerTelegram\";\nimport {MyContext} from \"../types/MyContext\";\nimport {Scenes} from \"telegraf\";\nimport {SceneSession} from \"telegraf/typings/scenes\";\n\nexport const cabinetGate = async (ctx: MyContext, scene: string) => {\n    let user = null;\n    try{\n        user = await LaravelService.getUserByTelegramId(ctx.from.id);\n    } catch (error) {\n        logger.error('Error getting user:', error);\n        await ctx.reply('Произошла ошибка при получении данных пользователя. Попробуйте позже');\n    }\n\n    if(user && user.cabinets.length === 0) {\n        await ctx.scene.enter('createCabinetWizzard');\n    } else {\n        await ctx.scene.enter(scene, {user});\n    }\n}","// nodejs-server/utils/clusterManager.ts\n\nimport { Cluster } from 'playwright-cluster';\n\nlet cluster: Cluster | undefined;\n\nconst initializeCluster = async (): Promise<Cluster> => {\n    if (cluster) {\n        return cluster;\n    }\n\n    cluster = await Cluster.launch({\n        concurrency: Cluster.CONCURRENCY_CONTEXT,\n        maxConcurrency: 3,\n        timeout: 120000,\n        playwrightOptions: {\n            headless: true,\n        },\n    });\n\n    cluster.on('taskerror', (err: Error, data: any, willRetry: boolean) => {\n        if (willRetry) {\n            console.warn(`Error processing ${data}: ${err.message}. Retrying...`);\n        } else {\n            console.error(`Failed to process ${data}: ${err.message}`);\n        }\n    });\n\n    cluster.on('active', () => {\n        console.log('A new task has started. Active tasks:', cluster!.idle);\n    });\n\n    cluster.on('idle', () => {\n        console.log('All tasks are complete. Cluster is idle.');\n    });\n\n    return cluster;\n};\n\nconst shutdownCluster = async (): Promise<void> => {\n    if (cluster) {\n        await cluster.close();\n        console.log('Cluster has been shut down.');\n        cluster = undefined;\n    }\n};\n\nprocess.on('SIGINT', async () => {\n    console.log('Received SIGINT. Shutting down cluster...');\n    await shutdownCluster();\n    process.exit(0);\n});\n\nprocess.on('SIGTERM', async () => {\n    console.log('Received SIGTERM. Shutting down cluster...');\n    await shutdownCluster();\n    process.exit(0);\n});\n\nexport {\n    initializeCluster,\n    shutdownCluster,\n};\n","/**\n * Formats a Date object into 'YYYY.MM.DD' string format.\n * @param date - The Date object to format.\n * @returns A string representing the formatted date.\n */\nexport const formatDateYYYYMMDD = (date: Date): string => {\n    const year = date.getFullYear();\n    // Months are zero-based in JavaScript, so add 1 and pad with zero if needed\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    return `${year}.${month}.${day}`;\n};\n\n/**\n * Formats a Date object into 'DD.MM.YYYY' string format.\n * @param date - The Date object to format.\n * @returns A string representing the formatted date.\n */\nexport const formatDateDDMMYYYY = (date: Date): string => {\n    // Months are zero-based in JavaScript, so add 1 and pad with zero if needed\n    const day = String(date.getDate()).padStart(2, '0');\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const year = date.getFullYear();\n    return `${day}.${month}.${year}`;\n}","import { createLogger, format, transports, Logger } from 'winston';\n\nconst loggerTelegram: Logger = createLogger({\n    level: 'info',\n    format: format.json(),\n    defaultMeta: { service: 'nodejs-server' },\n    transports: [\n        new transports.Console({\n            format: format.combine(\n                format.timestamp(),\n                format.simple()\n            ),\n        }),\n        new transports.File({\n            filename: 'telegram.log',\n            format: format.json(),\n        }),\n    ],\n});\n\nexport default loggerTelegram;\n","// src/utils/pow/solveTask.ts\n\nimport path from 'path';\nimport fs from 'fs';\nimport vm from 'vm';\n\n// Step 1: Load wasm_exec.js (adjust the path to where you store the wasm_exec.js file)\nconst wasmExecPath = path.join(__dirname, 'wasm_exec.js');\nconst wasmExecCode = fs.readFileSync(wasmExecPath, 'utf8');\nvm.runInThisContext(wasmExecCode); // This defines `global.Go`\n\ndeclare var Go: any;\n\nexport interface TaskInput {\n    // Your TaskInput interface definition\n}\n\n// Step 2: Create a function to run WebAssembly in Node.js\nasync function solveTaskInNode(wasmPath: string, taskInput: TaskInput): Promise<any> {\n    const go = new Go();\n\n    // Load the WebAssembly file from the file system\n    const wasmBuffer = fs.readFileSync(wasmPath);\n\n    // Instantiate WebAssembly with the Go import object\n    const { instance } = await WebAssembly.instantiate(wasmBuffer, go.importObject);\n    go.run(instance);\n\n    // Now call solveTask\n    try {\n        const solveTaskResult = (global as any).solveTask(taskInput);\n        return solveTaskResult;\n    } catch (error) {\n        throw error;\n    }\n}\n\n// Step 3: Define the wasmPath and taskInput\nconst wasmPath = path.join(__dirname, 'solve.wasm'); // Path to your solve.wasm file\n\n// Export the function\nexport {\n    solveTaskInNode,\n    wasmPath,\n};\n","// src/cache/Cache.ts\n\nimport redisClient from '../redisClient';\nimport { serialize, unserialize } from 'php-serialize';\nimport axios from 'axios';\n\n// Define an interface for the user data returned by the API\ninterface User {\n    id: number;\n    telegramId: string;\n    name: string;\n    // Add other user properties as needed\n}\n\ninterface ScanResult {\n    cursor: number;\n    keys: string[];\n}\n\nclass Cache {\n    private prefix: string;\n\n    constructor() {\n        this.prefix = 'wb_app_database_';\n    }\n\n    /**\n     * Sets a value in the Redis cache.\n     * @param key - The key under which the value is stored.\n     * @param value - The value to store; can be any serializable type.\n     * @param expirationInSeconds - Time in seconds before the key expires. Defaults to 3600 seconds (1 hour).\n     */\n    async set(key: string, value: any, expirationInSeconds: number = 3600): Promise<void> {\n        const fullKey = `${this.prefix}${key}`;\n        try {\n            const serializedValue = serialize(value);\n            await redisClient.set(fullKey, serializedValue, {\n                EX: expirationInSeconds, // Expiration time in seconds\n            });\n            console.log(`Value set for key: ${fullKey}`);\n        } catch (err) {\n            console.error(`Error setting cache value for key ${fullKey}:`, err);\n        }\n    }\n\n    /**\n     * Retrieves a value from the Redis cache.\n     * @param key - The key of the value to retrieve.\n     * @returns The deserialized value if found, raw value if deserialization fails, or null if not found.\n     */\n    async get(key: string): Promise<any | null> {\n        const fullKey = `${this.prefix}${key}`;\n        try {\n            const value = await redisClient.get(fullKey);\n            if (value !== null) {\n                try {\n                    const deserializedValue = unserialize(value);\n                    // console.log(`Value retrieved for key ${fullKey}:`, deserializedValue);\n                    return deserializedValue;\n                } catch (error) {\n                    console.warn(`Failed to deserialize value for key ${fullKey}. Returning raw value.`);\n                    return value;\n                }\n            } else {\n                console.log(`Key ${fullKey} not found in cache.`);\n                return null;\n            }\n        } catch (err) {\n            console.error(`Error getting cache value for key ${fullKey}:`, err);\n            return null;\n        }\n    }\n\n    /**\n     * Retrieves a value from the cache. If it doesn't exist, computes it using the provided function,\n     * stores it in the cache, and then returns it.\n     *\n     * @param key - The cache key.\n     * @param computeFn - An asynchronous function to compute the value if it's not cached.\n     * @param expirationInSeconds - Cache expiration time in seconds. Defaults to 3600 (1 hour).\n     * @returns A promise that resolves with the cached or computed value.\n     */\n    async rememberCacheValue<T>(\n        key: string,\n        computeFn: () => Promise<T>,\n        expirationInSeconds: number = 3600\n    ): Promise<T> {\n        try {\n            // Attempt to retrieve the cached value\n            const cachedValue = await this.get(key);\n\n            if (cachedValue !== null) {\n                console.log(`Cache hit for key: ${key}`);\n                return cachedValue as T;\n            }\n\n            console.log(`Cache miss for key: ${key}. Computing value...`);\n\n            // Compute the value using the provided function\n            const computedValue = await computeFn();\n\n            // Store the computed value in the cache\n            await this.set(key, computedValue, expirationInSeconds);\n            console.log(`Computed and cached value for key: ${key}`);\n\n            return computedValue;\n        } catch (err) {\n            console.error(`Error in rememberCacheValue for key ${key}:`, err);\n            throw err; // Rethrow the error after logging\n        }\n    }\n\n\n    /**\n     * Retrieves a user by their Telegram ID, first checking the cache before making an API call.\n     * @param telegramId - The Telegram ID of the user.\n     * @returns The user data if found, or null otherwise.\n     */\n    async getUserByTelegramId(telegramId: number): Promise<User | null> {\n        const cacheKey = `user_telegram_id_${telegramId}`;\n        try {\n            let user: User | null = await this.get(cacheKey);\n            console.log('User retrieved from cache:', user);\n            if (user) {\n                return user;\n            }\n\n            const laravelApiUrl = process.env.LARAVEL_API_URL;\n            if (!laravelApiUrl) {\n                console.error('LARAVEL_API_URL is not defined in environment variables.');\n                return null;\n            }\n\n            const response = await axios.get<User>(`${laravelApiUrl}/users/telegram/${telegramId}`);\n            user = response.data;\n            console.log('User retrieved from API:', user);\n\n            // Optionally, cache the user data after fetching from the API\n            await this.set(cacheKey, user, 3600); // Cache for 1 hour\n\n            return user;\n        } catch (error) {\n            console.error('Error fetching user:', error);\n            return null;\n        }\n    }\n\n    /**\n     * Deletes a key from the Redis cache.\n     * @param key - The key to delete.\n     * @returns True if the key was deleted, false otherwise.\n     */\n    async forget(key: string): Promise<boolean> {\n        const fullKey = `${this.prefix}${key}`;\n        try {\n            const result = await redisClient.del(fullKey);\n            if (result === 1) {\n                console.log(`Successfully deleted key: ${fullKey}`);\n                return true;\n            } else {\n                console.log(`Key ${fullKey} does not exist or could not be deleted.`);\n                return false;\n            }\n        } catch (err) {\n            console.error(`Error deleting cache value for key ${fullKey}:`, err);\n            return false;\n        }\n    }\n\n    async forgetByPattern(pattern: string): Promise<boolean> {\n        const fullPattern = `${this.prefix}${pattern}`;\n        console.log(`Deleting keys matching pattern: ${fullPattern}`);\n        try {\n            let cursor = 0;\n            do {\n                const result:ScanResult = await redisClient.scan(cursor, {\n                    MATCH: fullPattern,\n                    COUNT: 100\n                });\n                console.log('Scan result:', result);\n\n                // Adjusted to match the actual response structure\n                const nextCursor = result.cursor;\n                const keys = result.keys;\n                cursor = nextCursor;\n\n                if (keys && keys.length > 0) {  // Added a check to ensure keys is defined\n                    await redisClient.del(keys);\n                    console.log(`Successfully deleted keys matching pattern: ${fullPattern}`);\n                }\n            } while (cursor !== 0);\n\n            return true;\n        } catch (err) {\n            console.error(`Error deleting cache values for pattern ${fullPattern}:`, err);\n            return false;\n        }\n    }\n\n    /**\n     * Publishes a message to a Redis channel.\n     * @param channel - The channel to publish the message to.\n     * @param message - The message to publish.\n     */\n    async pushToChannel(channel: string, message: string): Promise<void> {\n        const fullChannel = `${this.prefix}${channel}`;\n\n        try {\n            await redisClient.publish(fullChannel, message);\n            console.log(`Message published to channel ${channel}: ${message}`);\n        } catch (err) {\n            console.error(`Error publishing message to channel ${channel}:`, err);\n        }\n    }\n\n}\n\nexport default new Cache();\n","// utils/cacheHelper.ts\n\nimport redisClient from './redisClient';\nimport { serialize as phpSerialize, unserialize as phpUnserialize } from 'php-serialize';\n\n/**\n * Interface representing the options for setting a Redis key.\n */\ninterface SetOptions {\n    EX?: number; // Expiration time in seconds\n}\n\n/**\n * Serialize values to match Laravel's expected format (PHP serialization).\n * Sets a value in Redis with an optional expiration time.\n *\n * @param key - The cache key.\n * @param value - The value to cache.\n * @param expirationInSeconds - Expiration time in seconds (default is 3600 seconds or 1 hour).\n * @returns A promise that resolves when the value is set.\n */\nexport async function setCacheValue(\n    key: string,\n    value: any,\n    expirationInSeconds: number = 3600\n): Promise<void> {\n    try {\n        // Custom key format: wb_app_database_{key}\n        const formattedKey = `wb_app_database_${key}`;\n        const serializedValue = phpSerialize(value);\n        const options: SetOptions = {\n            EX: expirationInSeconds, // Expiration time in seconds\n        };\n        await redisClient.set(formattedKey, serializedValue, options);\n        console.log(`Value set for key: ${formattedKey}`);\n    } catch (err) {\n        console.error(`Error setting cache value for key ${key}:`, err);\n        throw err; // Rethrow the error after logging\n    }\n}\n\n/**\n * Retrieves a value from the Laravel Redis cache.\n * Attempts to unserialize the value; if unsuccessful, returns the raw value.\n *\n * @param key - The cache key.\n * @returns A promise that resolves with the cached value or null if not found.\n */\nexport async function getCacheValue<T = any>(key: string): Promise<T | string | null> {\n    try {\n        // Custom key format: wb_app_database_{key}\n        const formattedKey = `wb_app_database_${key}`;\n        const value = await redisClient.get(formattedKey);\n        if (value !== null) {\n            try {\n                const deserializedValue = phpUnserialize(value) as T;\n                console.log(`Value retrieved for key ${formattedKey}:`, deserializedValue);\n                return deserializedValue;\n            } catch (error) {\n                console.warn(`Failed to deserialize, returning raw value for key ${formattedKey}:`, value);\n                return value; // If not serialized, return raw value\n            }\n        } else {\n            console.log(`Key ${formattedKey} not found in cache.`);\n            return null;\n        }\n    } catch (err) {\n        console.error(`Error getting cache value for key ${key}:`, err);\n        throw err; // Rethrow the error after logging\n    }\n}\n\n/**\n * Clears (deletes) a specific cache key from Redis.\n *\n * @param key - The cache key to delete.\n * @returns A promise that resolves to true if the key was deleted, false otherwise.\n */\nexport async function clearCacheValue(key: string): Promise<boolean> {\n    try {\n        // Custom key format: wb_app_database_{key}\n        const formattedKey = `wb_app_database_${key}`;\n        const result = await redisClient.del(formattedKey);\n        if (result === 1) {\n            console.log(`Successfully deleted key: ${formattedKey}`);\n            return true;\n        } else {\n            console.log(`Key ${formattedKey} does not exist or could not be deleted.`);\n            return false;\n        }\n    } catch (err) {\n        console.error(`Error deleting cache value for key ${key}:`, err);\n        throw err; // Rethrow the error after logging\n    }\n}\n\n/**\n * Retrieves a value from the cache. If it doesn't exist, computes it using the provided function,\n * stores it in the cache, and then returns it.\n *\n * @param key - The cache key.\n * @param computeFn - An asynchronous function to compute the value if it's not cached.\n * @param expirationInSeconds - Cache expiration time in seconds. Defaults to 3600 (1 hour).\n * @returns A promise that resolves with the cached or computed value.\n */\nexport async function rememberCacheValue<T>(\n    key: string,\n    computeFn: () => Promise<T>,\n    expirationInSeconds: number = 3600\n): Promise<T> {\n    try {\n        // Attempt to retrieve the cached value\n        const cachedValue = await getCacheValue<T>(key);\n\n        if (cachedValue !== null) {\n            console.log(`Cache hit for key: ${key}`);\n            return cachedValue as T;\n        }\n\n        console.log(`Cache miss for key: ${key}. Computing value...`);\n\n        // Compute the value using the provided function\n        const computedValue = await computeFn();\n\n        // Store the computed value in the cache\n        await setCacheValue(key, computedValue, expirationInSeconds);\n        console.log(`Computed and cached value for key: ${key}`);\n\n        return computedValue;\n    } catch (err) {\n        console.error(`Error in rememberCacheValue for key ${key}:`, err);\n        throw err; // Rethrow the error after logging\n    }\n}\n\n","// utils/redisClient.ts\n\nimport { createClient, RedisClientType } from 'redis';\n\n/**\n * Configuration options for the Redis client.\n */\nconst redisConfig = {\n    url: 'redis://redis:6379/1', // Use Redis container name as host\n};\n\n/**\n * Create a Redis client instance.\n */\nconst redisClient: RedisClientType = createClient(redisConfig);\n\n/**\n * Connect to Redis.\n */\nconst connectRedis = async (): Promise<void> => {\n    try {\n        await redisClient.connect();\n        console.log('Connected to Redis');\n    } catch (error) {\n        console.error('Redis connection error:', error);\n        // Optionally, handle reconnection logic or exit the process\n        process.exit(1);\n    }\n};\n\n// Initiate the connection\nconnectRedis();\n\n/**\n * Gracefully handle application termination signals to disconnect Redis client.\n */\nconst gracefulShutdown = async () => {\n    try {\n        await redisClient.disconnect();\n        console.log('Disconnected from Redis');\n        process.exit(0);\n    } catch (error) {\n        console.error('Error during Redis disconnection:', error);\n        process.exit(1);\n    }\n};\n\n// Listen for termination signals\nprocess.on('SIGINT', gracefulShutdown);\nprocess.on('SIGTERM', gracefulShutdown);\n\nexport default redisClient;\n","// utils/redisHelper.ts\n\nimport redisSubscriber from './redisSubscriber';\n\n/**\n * Interface representing the structure of messages received from Redis.\n */\ninterface VerificationMessage {\n    action: string;\n    code: string;\n}\n\n/**\n * Waits for a verification code from Redis on a specific channel.\n * @param telegramId - The user's Telegram ID.\n * @param timeoutMs - Timeout in milliseconds (default is 300000 ms or 5 minutes).\n * @returns A promise that resolves with the verification code.\n */\nexport function waitForVerificationCode(\n    telegramId: string,\n    timeoutMs: number = 300000\n): Promise<string> {\n    return new Promise<string>(async (resolve, reject) => {\n        // Construct the channel name with the given Telegram ID\n        let channel = `verification_code_channel_${telegramId}`;\n        channel = `wb_app_database_${channel}`;\n\n        /**\n         * Handler for incoming messages on the Redis channel.\n         * @param message - The message received from Redis.\n         */\n        const messageHandler = (message: VerificationMessage) => {\n            if (message && message.action === 'collect_verification_code') {\n                console.log(\n                    `Received verification code for Telegram ID ${telegramId}: ${message.code}`\n                );\n                cleanup();\n                resolve(message.code);\n            }\n        };\n\n        /**\n         * Cleans up by unsubscribing from the Redis channel and clearing the timeout.\n         */\n        const cleanup = async () => {\n            try {\n                await redisSubscriber.unsubscribe(channel, messageHandler);\n            } catch (error) {\n                console.error(`Error during cleanup: ${error}`);\n            }\n            clearTimeout(timer);\n        };\n\n        // Set up a timeout to reject the promise if no verification code is received in time\n        const timer = setTimeout(async () => {\n            try {\n                await redisSubscriber.unsubscribe(channel, messageHandler);\n            } catch (error) {\n                console.error(`Error during timeout cleanup: ${error}`);\n            }\n            reject(new Error('Verification code timeout.'));\n        }, timeoutMs);\n\n        try {\n            await redisSubscriber.subscribe(channel, messageHandler);\n            console.log(`Waiting for verification code on channel: ${channel}`);\n        } catch (error) {\n            clearTimeout(timer);\n            reject(error);\n        }\n    });\n}\n","// redisSubscriber.ts\n\nimport { createClient, RedisClientType } from 'redis';\n\n/**\n * Type definition for a message handler function.\n * It accepts a parsed message of generic type T and returns void or a Promise.\n */\ntype MessageHandler<T = any> = (message: T | null) => void | Promise<void>;\n\n/**\n * Interface representing the structure of the message handlers.\n * Each channel maps to an array of message handler functions.\n */\ninterface MessageHandlers {\n    [channel: string]: MessageHandler[];\n}\n\n/**\n * RedisSubscriber is a singleton class responsible for managing Redis subscriptions.\n */\nclass RedisSubscriber {\n    private subscriber: RedisClientType;\n    private isConnected: boolean;\n    private messageHandlers: MessageHandlers;\n\n    constructor() {\n        this.subscriber = createClient({\n            url: 'redis://redis:6379/1', // Ensure using Database 1\n        });\n        this.isConnected = false;\n        this.messageHandlers = {};\n\n        this.subscriber.on('error', (err: Error) => {\n            console.error('Redis subscription error:', err);\n        });\n    }\n\n    /**\n     * Establishes a connection to the Redis server if not already connected.\n     */\n    private async connect(): Promise<void> {\n        if (!this.isConnected) {\n            try {\n                await this.subscriber.connect();\n                this.isConnected = true;\n                console.log('Connected to Redis.');\n            } catch (error) {\n                console.error('Failed to connect to Redis:', error);\n                throw error;\n            }\n        }\n    }\n\n    /**\n     * Subscribes to a Redis channel with a specific message handler.\n     * @param channel - The Redis channel to subscribe to.\n     * @param messageHandler - The function to handle incoming messages.\n     */\n    public async subscribe<T = any>(channel: string, messageHandler: MessageHandler<T>): Promise<void> {\n        await this.connect();\n\n        if (!this.messageHandlers[channel]) {\n            this.messageHandlers[channel] = [];\n\n            // Subscribe with a callback that iterates over all handlers for this channel\n            try {\n                await this.subscriber.subscribe(channel, async (message: string) => {\n                    const parsedMessage = this.parseMessage<T>(message, channel);\n                    if (parsedMessage === null) {\n                        // Parsing failed; optionally handle this scenario\n                        return;\n                    }\n\n                    // Execute all handlers for this channel\n                    for (const handler of this.messageHandlers[channel]) {\n                        try {\n                            await handler(parsedMessage);\n                        } catch (handlerError) {\n                            console.error(`Error in handler for channel ${channel}:`, handlerError);\n                        }\n                    }\n                });\n\n                console.log(`Subscribed to Redis channel: ${channel}`);\n            } catch (subscribeError) {\n                console.error(`Failed to subscribe to channel ${channel}:`, subscribeError);\n                throw subscribeError;\n            }\n        }\n\n        this.messageHandlers[channel].push(messageHandler);\n    }\n\n    /**\n     * Unsubscribes a specific message handler from a Redis channel.\n     * @param channel - The Redis channel to unsubscribe from.\n     * @param messageHandler - The handler to remove.\n     */\n    public async unsubscribe(channel: string, messageHandler: MessageHandler): Promise<void> {\n        if (this.messageHandlers[channel]) {\n            this.messageHandlers[channel] = this.messageHandlers[channel].filter(\n                (handler) => handler !== messageHandler\n            );\n\n            if (this.messageHandlers[channel].length === 0) {\n                delete this.messageHandlers[channel];\n                try {\n                    await this.subscriber.unsubscribe(channel);\n                    console.log(`Unsubscribed from Redis channel: ${channel}`);\n                } catch (unsubscribeError) {\n                    console.error(`Failed to unsubscribe from channel ${channel}:`, unsubscribeError);\n                    throw unsubscribeError;\n                }\n            }\n        }\n    }\n\n    /**\n     * Parses the incoming message and handles JSON parsing errors.\n     * @param message - The raw message string from Redis.\n     * @param channel - The Redis channel name.\n     * @returns The parsed message object or null if parsing fails.\n     */\n    private parseMessage<T>(message: string, channel: string): T | null {\n        try {\n            const parsed: T = JSON.parse(message);\n            console.log(`Message received from ${channel}:`, parsed);\n            return parsed;\n        } catch (error) {\n            console.error(`Error parsing message from channel ${channel}:`, error);\n            return null;\n        }\n    }\n\n    /**\n     * Disconnects the Redis subscriber gracefully.\n     */\n    public async disconnect(): Promise<void> {\n        if (this.isConnected) {\n            try {\n                await this.subscriber.disconnect();\n                this.isConnected = false;\n                console.log('Redis subscriber disconnected.');\n            } catch (error) {\n                console.error('Error disconnecting Redis subscriber:', error);\n                throw error;\n            }\n        }\n    }\n}\n\n// Exporting a singleton instance of RedisSubscriber\nconst redisSubscriber = new RedisSubscriber();\nexport default redisSubscriber;\n","import axios, { AxiosResponse } from 'axios';\nimport FormData from 'form-data';\n\n// Load environment variables\nconst TELEGRAM_BOT_TOKEN: string = process.env.TELEGRAM_BOT_TOKEN || '7237021957:AAEBwCsrCFNLFGArfGys3rJgzqitL9Wsg8k';\nconst TELEGRAM_CHAT_ID: string = process.env.TELEGRAM_CHAT_ID || '782919745';\n\n/**\n * Sends a text message to the specified Telegram chat.\n * @param message - The message text to send.\n * @param telegram_chat_id - Optional chat ID to send the message to.\n * @returns Returns true if sent successfully, else false.\n */\nasync function sendMessageToTelegram(message: string, telegram_chat_id: string | null = null): Promise<boolean> {\n    const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;\n    const form = new FormData();\n    form.append('chat_id', telegram_chat_id || TELEGRAM_CHAT_ID);\n    form.append('text', message);\n\n    try {\n        const response: AxiosResponse<{ ok: boolean; result?: any }> = await axios.post(url, form, {\n            headers: form.getHeaders(),\n        });\n        if (response.data.ok) {\n            console.log('Message sent to Telegram successfully!');\n            return true;\n        } else {\n            console.error('Failed to send message:', response.data);\n            return false;\n        }\n    } catch (error: any) {\n        console.error('Exception occurred while sending message:', error.message);\n        return false;\n    }\n}\n\n/**\n * Retrieves updates from the Telegram Bot API.\n * @param offset - The update ID to start fetching from.\n * @returns Returns the JSON response or null on failure.\n */\nasync function getUpdates(offset: number | null = null): Promise<any | null> {\n    const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getUpdates`;\n    const params: { timeout: number; offset?: number } = { timeout: 100 };\n    if (offset !== null) {\n        params.offset = offset;\n    }\n\n    try {\n        const response: AxiosResponse<{ ok: boolean; result?: any }> = await axios.get(url, { params });\n        if (response.data.ok) {\n            return response.data;\n        } else {\n            console.error('Failed to get updates:', response.data);\n            return null;\n        }\n    } catch (error: any) {\n        console.error('Exception occurred while getting updates:', error.message);\n        return null;\n    }\n}\n\nexport {\n    sendMessageToTelegram,\n};\n","export const BOX_TYPES: Record<string, string> = {\n    2: '📦 Короба',\n    5: '⚡  Монопаллеты',\n};\n\nexport const BOX_TYPES_TEXT_ONLY: Record<string, string> = {\n    2: 'Короба',\n    5: 'Монопаллеты',\n    6: 'Суперсейфф',\n};\n\nexport const COEFFICIENTS: Record<number, string> = {\n    0: 'Бесплатная',\n    1: '1️⃣ До х1',\n    2: '2️⃣ До х2',\n    3: '3️⃣ До х3',\n    4: '4️⃣ До х4',\n    5: '5️⃣ До х5',\n    6: '6️⃣ До х6',\n};\n\nexport const COEFFICIENTS_TEXT_ONLY: Record<number, string> = {\n    0: 'Бесплатная',\n    1: 'До х1',\n    2: 'До х2',\n    3: 'До х3',\n    4: 'До х4',\n    5: 'До х5',\n    6: 'До х6',\n};\n\nexport const DATES: Record<string, string> = {\n    today: 'Сегодня',\n    tomorrow: 'Завтра',\n    week: 'В течение недели',\n    month: 'В течение месяца',\n    customdates: '🔄 Ввести свои даты',\n};\n\nexport const WAREHOUSES: Record<number, string> = {\n    218987: 'Алматы Атакент',\n    204939: 'Астана',\n    324108: 'Астана 2',\n    206236: 'Белые Столбы',\n    301983: 'Волгоград',\n    317470: 'Голицыно СГТ',\n    300461: 'Гомель 2',\n    208941: 'Домодедово',\n    1733: 'Екатеринбург - Испытателей 14г',\n    300571: 'Екатеринбург - Перспективный 12/2',\n    117986: 'Казань',\n    206844: 'Калининград',\n    303295: 'Клин',\n    507: 'Коледино',\n    301809: 'Котовск',\n    130744: 'Краснодар (Тихорецкая)',\n    6145: 'Красноярск',\n    211622: 'Минск',\n    208277: 'Невинномысск',\n    301805: 'Новосемейкино',\n    686: 'Новосибирск',\n    218210: 'Обухово',\n    312617: 'Обухово СГТ',\n    106476: 'Оренбург',\n    117501: 'Подольск',\n    218623: 'Подольск 3',\n    301229: 'Подольск 4',\n    300169: 'Радумля СГТ',\n    301760: 'Рязань (Тюшевское)',\n    206298: 'СЦ Абакан',\n    300862: 'СЦ Абакан 2',\n    316879: 'СЦ Актобе',\n    214951: 'СЦ Артем',\n    209207: 'СЦ Архангельск',\n    302769: 'СЦ Архангельск (ул Ленина)',\n    169872: 'СЦ Астрахань',\n    302988: 'СЦ Астрахань (Солянка)',\n    215020: 'СЦ Байсерке',\n    302737: 'СЦ Барнаул',\n    172430: 'СЦ Барнаул old',\n    210557: 'СЦ Белогорск',\n    216476: 'СЦ Бишкек',\n    300363: 'СЦ Брест',\n    172940: 'СЦ Брянск',\n    302856: 'СЦ Видное',\n    158751: 'СЦ Владикавказ',\n    144649: 'СЦ Владимир',\n    210127: 'СЦ Внуково',\n    301516: 'СЦ Волгоград 2',\n    6144: 'СЦ Волгоград old',\n    203631: 'СЦ Вологда',\n    300219: 'СЦ Вологда 2',\n    211415: 'СЦ Воронеж',\n    210515: 'СЦ Вёшки',\n    211644: 'СЦ Екатеринбург 2 (Альпинистов)',\n    218402: 'СЦ Иваново',\n    203632: 'СЦ Иваново (до 03.05.23)',\n    218628: 'СЦ Ижевск',\n    158140: 'СЦ Ижевск (до 29.05)',\n    131643: 'СЦ Иркутск',\n    117442: 'СЦ Калуга',\n    213849: 'СЦ Кемерово',\n    303219: 'СЦ Киров',\n    205205: 'СЦ Киров (old)',\n    154371: 'СЦ Комсомольская',\n    6159: 'СЦ Красногорск',\n    205985: 'СЦ Крыловская',\n    302335: 'СЦ Кузнецк',\n    140302: 'СЦ Курск',\n    156814: 'СЦ Курьяновская',\n    160030: 'СЦ Липецк',\n    117289: 'СЦ Лобня',\n    313214: 'СЦ Магнитогорск',\n    209211: 'СЦ Махачкала',\n    117393: 'СЦ Минск',\n    121700: 'СЦ Минск 2',\n    205349: 'СЦ Мурманск',\n    204952: 'СЦ Набережные Челны',\n    118535: 'СЦ Нижний Новгород',\n    211470: 'СЦ Нижний Тагил',\n    141637: 'СЦ Новокосино',\n    206708: 'СЦ Новокузнецк',\n    161520: 'СЦ Новосибирск Пасечная',\n    303221: 'СЦ Ноябрьск',\n    312807: 'СЦ Обухово 2',\n    168458: 'СЦ Омск',\n    206319: 'СЦ Оренбург',\n    315199: 'СЦ Оренбург Центральная',\n    218732: 'СЦ Ош',\n    216566: 'СЦ Пермь 2',\n    208647: 'СЦ Печатники',\n    124716: 'СЦ Подрезково',\n    209209: 'СЦ Псков',\n    207743: 'СЦ Пушкино',\n    158311: 'СЦ Пятигорск',\n    301920: 'СЦ Пятигорск (Этока)',\n    300168: 'СЦ Радумля',\n    218616: 'СЦ Ростов-на-Дону',\n    118019: 'СЦ Ростов-на-Дону old-1',\n    133533: 'СЦ Ростов-на-Дону old-2',\n    6156: 'СЦ Рязань',\n    117230: 'СЦ Самара',\n    158929: 'СЦ Саратов',\n    303189: 'СЦ Семей',\n    169537: 'СЦ Серов',\n    144154: 'СЦ Симферополь',\n    210937: 'СЦ Симферополь 2',\n    207803: 'СЦ Смоленск 2',\n    300987: 'СЦ Смоленск 3',\n    209596: 'СЦ Солнцево',\n    161003: 'СЦ Сургут',\n    209208: 'СЦ Сыктывкар',\n    117866: 'СЦ Тамбов',\n    218636: 'СЦ Ташкент',\n    117456: 'СЦ Тверь',\n    204615: 'СЦ Томск',\n    117819: 'СЦ Тюмень',\n    205104: 'СЦ Ульяновск',\n    300711: 'СЦ Уральск',\n    149445: 'СЦ Уфа',\n    218644: 'СЦ Хабаровск',\n    203799: 'СЦ Чебоксары',\n    218916: 'СЦ Чебоксары 2',\n    132508: 'СЦ Челябинск',\n    218225: 'СЦ Челябинск 2',\n    311895: 'СЦ Череповец',\n    218674: 'СЦ Чита 2',\n    207022: 'СЦ Чёрная Грязь',\n    312259: 'СЦ Шушары',\n    218698: 'СЦ Шымкент',\n    158328: 'СЦ Южные Ворота',\n    207404: 'СЦ Ярославль',\n    2737: 'Санкт-Петербург (Уткина Заводь)',\n    159402: 'Санкт-Петербург (Шушары)',\n    1680: 'Саратов Депутатская РЦ',\n    122259: 'Склад поставщика КБТ 96 ч',\n    217081: 'Сц Брянск 2',\n    302445: 'Сынково',\n    206348: 'Тула',\n    303024: 'Улан-Удэ, Ботаническая',\n    302222: 'Уфа, Зубово',\n    1193: 'Хабаровск',\n    321932: 'Чашниково',\n    206968: 'Чехов 1, Новоселки вл 11 стр 2',\n    210001: 'Чехов 2, Новоселки вл 11 стр 7',\n    300864: 'Шелепаново',\n    120762: 'Электросталь',\n};\n","module.exports = require(\"@telegraf/session/redis\");","module.exports = require(\"axios\");","module.exports = require(\"body-parser\");","module.exports = require(\"bull\");","module.exports = require(\"express\");","module.exports = require(\"form-data\");","module.exports = require(\"php-serialize\");","module.exports = require(\"playwright-cluster\");","module.exports = require(\"redis\");","module.exports = require(\"telegraf\");","module.exports = require(\"telegraf/format\");","module.exports = require(\"uuid\");","module.exports = require(\"winston\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","module.exports = require(\"vm\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import express, { Application, Request, Response } from 'express';\nimport bodyParser from 'body-parser';\nimport winston from 'winston'; // For logging\nimport { initializeCluster, shutdownCluster } from './utils/clusterManager';\n\nimport bot from './telegraf/controllers/telegramController';\n// Import Routes\nimport draftsRoutes from './routes/drafts';\nimport ordersRoutes from './routes/orders';\nimport acceptanceRoutes from './routes/acceptance';\nimport authRoutes from './routes/auth';\n\nconst app: Application = express();\nconst PORT: number | string = process.env.PORT || 3000;\n\n// Configure Winston (optional)\nexport const logger = winston.createLogger({\n    level: 'info',\n    format: winston.format.json(),\n    defaultMeta: { service: 'nodejs-server' },\n    transports: [\n        new winston.transports.Console({\n            format: winston.format.simple(),\n        }),\n        new winston.transports.File({\n            filename: 'combined.log', // Log file name\n            format: winston.format.json(), // Optional: Can also use format like simple or custom formats\n        }),\n        // Add more transports like File if needed\n    ],\n});\n\n// Middleware\napp.use(bodyParser.json());\n\n// Routes\n// Webhook route\napp.use(bot.webhookCallback('/webhook/telegram'));\n\napp.use('/api/drafts', draftsRoutes);\napp.use('/api/orders', ordersRoutes);\napp.use('/api/acceptance', acceptanceRoutes);\napp.use('/api/auth', authRoutes);\n\n// Health Check Endpoint\napp.get('/health', (req: Request, res: Response) => {\n    res.status(200).send({ status: 'OK' });\n});\n\n// Start Server After Initializing Cluster\nconst startServer = async (): Promise<void> => {\n    try {\n        await initializeCluster(); // Initialize Playwright Cluster\n        app.listen(PORT, () => {\n            console.log(`Node.js server is running on port ${PORT}`);\n        });\n    } catch (error: any) {\n        console.error('Failed to initialize Playwright cluster:', error.message);\n        process.exit(1); // Exit process with failure\n    }\n};\n\nstartServer();\n\n// Handle graceful shutdown\nprocess.on('SIGINT', async () => {\n    console.log('Shutting down server...');\n    await shutdownCluster();\n    process.exit(0);\n});\n\nprocess.on('SIGTERM', async () => {\n    console.log('Shutting down server...');\n    await shutdownCluster();\n    process.exit(0);\n});\n"],"names":[],"sourceRoot":""}