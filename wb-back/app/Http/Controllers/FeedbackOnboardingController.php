<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Cabinet;
use App\Http\Controllers\WelcomeBotController;
use TelegramBot\Api\Types\Inline\InlineKeyboardMarkup;
use App\Jobs\DeleteTelegramMessage;
use Illuminate\Support\Facades\Auth;
use App\Models\User;
use Illuminate\Support\Facades\Cache;
use TelegramBot\Api\Client;

class FeedbackOnboardingController extends Controller
{
    protected $bot;

    public function __construct(Client $bot)
    {
        $this->bot = $bot;
    }

    public function setupBrand($chatId, $messageId = null)
    {
        //Check if user already has a cabinet and brand name
        $user = Auth::user();
        $cabinet = $user->cabinets()->first();
        if (!$cabinet) {
            // Create a new cabinet with the provided name and default settings
            $cabinet = $user->cabinets()->create([
                'name' => '–ö–∞–±–∏–Ω–µ—Ç #' . $user->id,
                'settings' => [], // Default settings
            ]);
        }
        
        $this->setupMode($chatId, $messageId, $cabinet->id);
    }

    public function setupCabinet($chatId, $cabinetId, $messageIdOriginal)
    {
        $cabinet = Cabinet::findOrFail($cabinetId);
        $settings = $cabinet->settings;
        $mySettingsString = '';
        $modeHuman = [
            'auto_response' => '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç',
            'positive_response' => '–û—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ',
            'manual_confirmation' => '–†—É—á–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
            'combined' => '–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º',
        ];

        $mySettingsString .= "‚öôÔ∏è –†–µ–∂–∏–º: <code>" . $modeHuman[$settings['onboarding']['mode']] . "</code>\n\n";
        $mySettingsString .= "üí¨ –†–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: <code>" . $settings['onboarding']['advertisement_message'] . "</code>\n\n";
        $mySettingsString .= "üöÄ –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é: <code>" . $settings['onboarding']['call_to_action'] . "</code>\n\n";
        
        $message = "–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
        
{$mySettingsString}";
        
        $keyboard = new InlineKeyboardMarkup([
            [['text' => '‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º', 'callback_data' => 'welcome_handle_mode_' . $cabinet->id]],
            [['text' => '‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', 'callback_data' => 'welcome_setup_advertisement_message_' . $cabinet->id]],
            [['text' => '‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é', 'callback_data' => 'welcome_setup_call_to_action_' . $cabinet->id]],
            [['text' => 'üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–±–∏–Ω–µ—Ç', 'callback_data' => 'welcome_cabinet']]
        ]);

        $this->sendOrUpdateMessage($chatId, $messageIdOriginal, $message, $keyboard, 'HTML');
    }

    public function setupMode($chatId, $messageIdOriginal, $cabinetId, $from = null)
    {
        $cabinet = Cabinet::findOrFail($cabinetId);
        //Current settings
        $settings = $cabinet->settings;
        // Current mode
        $mode = $settings['onboarding']['mode'] ?? null;
        
        Cache::forget("session_{$chatId}");
        $message = "–Ø –º–æ–≥—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–∞—à–∏ –æ—Ç–∑—ã–≤—ã –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏.
–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–µ–∂–∏–º:

 1Ô∏è‚É£ <b>–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º (–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è):</b> –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á—É –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã, –∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—Ä—É—á–Ω—É—é –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ.

 2Ô∏è‚É£ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤—Å–µ –æ—Ç–∑—ã–≤—ã:</b> –Ø –±—É–¥—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤—Å–µ –ø–æ—Å—Ç—É–ø–∞—é—â–∏–µ –æ—Ç–∑—ã–≤—ã ‚Äî –±—ã—Å—Ç—Ä–æ –∏ –±–µ–∑ –≤–∞—à–µ–≥–æ —É—á–∞—Å—Ç–∏—è.

 3Ô∏è‚É£ <b>–û—Ç–≤–µ—Ç—ã —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã:</b> –Ø –±—É–¥—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –æ—Ç–∑—ã–≤—ã —Å –æ—Ü–µ–Ω–∫–æ–π 4-5 –∑–≤–µ–∑–¥. –û—Ç–∑—ã–≤—ã —Å –Ω–∏–∑–∫–æ–π –æ—Ü–µ–Ω–∫–æ–π (1-3 –∑–≤–µ–∑–¥—ã) –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.

 4Ô∏è‚É£ <b>–†—É—á–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:</b> –Ø —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç –Ω–∞ –∫–∞–∂–¥—ã–π –æ—Ç–∑—ã–≤, –∞ –≤—ã —Ä–µ—à–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ, –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π.

–ö–∞–∫–æ–π —Ä–µ–∂–∏–º –ø–æ–¥—Ö–æ–¥–∏—Ç –≤–∞–º?

–Ø —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ–¥–∫–ª—é—á–∏—Ç—å <b>–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º</b>, —á—Ç–æ–±—ã –∏–º–µ—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º–∏ –æ—Ç–∑—ã–≤–∞–º–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ.";

        $modeHuman = [
            'auto_response' => '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç',
            'positive_response' => '–û—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ',
            'manual_confirmation' => '–†—É—á–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
            'combined' => '–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º',
        ];
        
        if($mode){
            $message .= "\n\n–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: <code>{$modeHuman[$mode]}</code>";
        };
        
        //save $from in cache
        if($from)
            Cache::put("from_{$chatId}", $from, 300); // Cache for 5 minutes

        $keyboard = new InlineKeyboardMarkup([
            [['text' => '1Ô∏è‚É£ –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º', 'callback_data' => 'welcome_set_mode_combined_'.$cabinet->id]],
            [['text' => '2Ô∏è‚É£ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç', 'callback_data' => 'welcome_set_mode_auto_response_'.$cabinet->id]],
            [['text' => '3Ô∏è‚É£ –û—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ', 'callback_data' => 'welcome_set_mode_positive_response_'.$cabinet->id]],
            [['text' => '4Ô∏è‚É£ –†—É—á–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', 'callback_data' => 'welcome_set_mode_manual_confirmation_'.$cabinet->id]],
        ]);
        $this->sendOrUpdateMessage($chatId, $messageIdOriginal, $message, $keyboard, 'HTML');
    }

    public function setMode($chatId, $mode_and_cabinet_id, $messageId)
    {
        $user = Auth::user();
    
        // Extract cabinetId from the string (last element after the last underscore)
        $parts = explode('_', $mode_and_cabinet_id);
        $cabinetId = array_pop($parts);
    
        // Recombine the remaining parts for the mode
        $mode = implode('_', $parts);
    
        // Find the cabinet for the authenticated user
        $cabinet = $user->cabinets()->findOrFail($cabinetId);
    
        // Retrieve the current settings
        $settings = $cabinet->settings;
    
        // Initialize onboarding settings if they don't exist
        $settings = $this->checkOnboarding($settings); 
    
        // Set the onboarding mode
        $settings['onboarding']['mode'] = $mode;
        $cabinet->settings = $settings;
        $cabinet->save();
    
        //get from from cache
        $from = Cache::get("from_{$chatId}");
        if($from == 'welcome_setup_cabinet'){
            $this->setupCabinet($chatId, $cabinetId, $messageId);
        } else {
            $this->sendSetAdvertisementMessage($chatId, $messageId, $cabinetId);
        }
        Cache::forget("from_{$chatId}");
       
    }
    
    public function setAdvertisementMessage($chatId, $text, $cabinetId, $messageId)
    {
        $user = Auth::user();
        $cabinet = $user->cabinets()->findOrFail($cabinetId);
        $settings = $cabinet->settings;
        // Init onboarding settings if they don't exist
        $settings = $this->checkOnboarding($settings); 

        $settings['onboarding']['advertisement_message'] = $text;
        $cabinet->settings = $settings;
        $cabinet->save();

        //get from from cache
        $from = Cache::get("from_{$chatId}");
        if($from == 'welcome_setup_cabinet'){
            $this->setupCabinet($chatId, $cabinetId, $messageId);
        } else {
            $this->sendSetCallToAction($chatId, $messageId, $cabinetId);
        }
        Cache::forget("from_{$chatId}");
    }

    public function setCallToAction($chatId, $text, $cabinetId, $messageId)
    {
        $user = Auth::user();
        $cabinet = $user->cabinets()->findOrFail($cabinetId);
        $settings = $cabinet->settings;
        // Init onboarding settings if they don't exist
        $settings = $this->checkOnboarding($settings); 

        $settings['onboarding']['call_to_action'] = $text;
        $cabinet->settings = $settings;
        $cabinet->save();
        
        $isKeyExists = $cabinet->getFeedbackApiKey();

        //get from from cache
        $from = Cache::get("from_{$chatId}");
        if($from == 'welcome_setup_cabinet'){
            $this->setupCabinet($chatId, $cabinetId, $messageId);
        } else {
            if($isKeyExists){
                $this->listSettings($chatId, $messageId, $cabinetId);
            } else {
                $this->sendFinishOnboarding($chatId, $messageId, $cabinetId);
            }
        }
        Cache::forget("from_{$chatId}");
    }
    
    public function sendSetAdvertisementMessage($chatId, $messageId = null, $cabinetId, $from = null)
    {
        //Check if message already set
        $cabinet = Cabinet::findOrFail($cabinetId);
        $settings = $cabinet->settings;
        $message = '';
        // Init onboarding settings if they don't exist
        if($settings['onboarding']['advertisement_message']){
            $message = "–í–∞—à–µ —Ä–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: 
<code>{$settings['onboarding']['advertisement_message']}</code>

–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –º–Ω–µüëá";
        } else {
        $message = "–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º —Ä–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
 
–í –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Ç–∑—ã–≤—ã —è –º–æ–≥—É –¥–æ–±–∞–≤–ª—è—Ç—å —Ä–µ–∫–ª–∞–º—É –≤–∞—à–∏—Ö –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤. –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –≤ –∫–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤.
–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –ø—Ä–∏–º–µ—Ä—É –Ω–∏–∂–µ:

<code>–¢–∞–∫–∂–µ —É –Ω–∞—Å –ø–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π –∞—Ä–æ–º–∞—Ç–∏–∑–∞—Ç–æ—Ä –¥–ª—è –¥–æ–º–∞ (–ê–†–¢–ò–ö–£–õ 778856476)</code>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥ üëá";
        }

        //save $from in cache
        if($from)
            Cache::put("from_{$chatId}", $from, 300);
        
        //Set cache session to collection advertisement message
        Cache::put("session_{$chatId}", ['action' => 'collect_advertisement_message','cabinet_id' => $cabinetId, 'messageId' => $messageId], 300); // Cache for 5 minutes
        $keyboard = new InlineKeyboardMarkup([
            [['text' => '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚û°Ô∏è', 'callback_data' => 'welcome_skip_advertisement_message_'. $cabinetId]] 
        ]);
        $this->sendOrUpdateMessage($chatId, $messageId, $message, $keyboard, 'HTML');
    }

    public function sendSetCallToAction($chatId, $messageId = null, $cabinetId, $from = null)
    {
        $cabinet = Cabinet::findOrFail($cabinetId);
        //check if mode already set
        $settings = $cabinet->settings;
        $message = '';
        if($settings['onboarding']['call_to_action']){
            $message = "–í–∞—à –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±—Ä–µ–Ω–¥–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: 
<code>{$settings['onboarding']['call_to_action']}</code>

–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–∑—ã–≤, —Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –º–Ω–µüëá";
        } else {
            $message = "–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±—Ä–µ–Ω–¥–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.

–ü—Ä–∏–º–µ—Ä: <code>–î–æ–±–∞–≤—å—Ç–µ –±—Ä–µ–Ω–¥ LOCAL –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤–∏–Ω–∫–∏: –Ω–∞–∂–∞–≤ –Ω–∞ –±—Ä–µ–Ω–¥, –∞ –ø–æ—Ç–æ–º –Ω–∞ '—Å–µ—Ä–¥–µ—á–∫–æ' –∏–ª–∏ –∫–Ω–æ–ø–∫—É '+–Ω—Ä–∞–≤–∏—Ç—Å—è'</code>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥ üëá
";
        }
        
        //save $from in cache
        if($from)
            Cache::put("from_{$chatId}", $from, 300); // Cache for 5 minutes

        //Set cache session to collection call to action
        Cache::put("session_{$chatId}", ['action' => 'collect_call_to_action','cabinet_id' => $cabinetId, 'messageId' => $messageId], 300); // Cache for 5 minutes
        $keyboard = new InlineKeyboardMarkup([
            [['text' => '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚û°Ô∏è', 'callback_data' => 'welcome_skip_call_to_action_' . $cabinetId]] 
        ]);
        $this->sendOrUpdateMessage($chatId, $messageId, $message, $keyboard, 'HTML');
    }
    public function skipAdvertisementMessage($chatId, $cabinetId, $messageId){
        $from = Cache::get("from_{$chatId}");
        if($from == 'welcome_setup_cabinet'){
            $this->setupCabinet($chatId, $cabinetId, $messageId);
        } else {
            $this->sendSetCallToAction($chatId, $messageId, $cabinetId);
        }
        Cache::forget("from_{$chatId}");
        Cache::forget("session_{$chatId}");
    }
    public function skipCallToAction($chatId, $cabinetId, $messageId){
        //check if key exists in cabinet
        $cabinet = Cabinet::findOrFail($cabinetId);
        $isKeyExists = $cabinet->getFeedbackApiKey();

        $from = Cache::get("from_{$chatId}");
        if($from == 'welcome_setup_cabinet'){
            $this->setupCabinet($chatId, $cabinetId, $messageId);
        } else {
            if($isKeyExists){
                $this->listSettings($chatId, $messageId, $cabinetId);
            } else {
                $this->sendFinishOnboarding($chatId, $messageId, $cabinetId);
            }
        }
        Cache::forget("from_{$chatId}");
        Cache::forget("session_{$chatId}");
    }

    public function listSettings($chatId, $messageId = null, $cabinetId)
    {
        $cabinet = Cabinet::findOrFail($cabinetId);
        $settings = $cabinet->settings;
        $mySettingsString = '';
        $modeHuman = [
            'auto_response' => '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç',
            'positive_response' => '–û—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ',
            'manual_confirmation' => '–†—É—á–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
            'combined' => '–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º',
        ];

        $mySettingsString .= "–†–µ–∂–∏–º: " . $modeHuman[$settings['onboarding']['mode']] . "\n\n";
        $mySettingsString .= "–†–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: <code>" . $settings['onboarding']['advertisement_message'] . "</code>\n\n";
        $mySettingsString .= "–ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é: <code>" . $settings['onboarding']['call_to_action'] . "</code>\n\n";
        $mySettingsString .= "–ë—Ä–µ–Ω–¥: " . $cabinet->name . "\n";

        $message = "–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:

{$mySettingsString}"
;
        $keyboard = new InlineKeyboardMarkup([
            [['text' => 'üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–±–∏–Ω–µ—Ç', 'callback_data' => 'welcome_cabinet']] 
        ]);
        $this->sendOrUpdateMessage($chatId, $messageId, $message, $keyboard, 'HTML');
    }

    public function sendFinishOnboarding($chatId, $messageId = null, $cabinetId)
    {
        $mySettingsString = '';
        $settings = Cabinet::findOrFail($cabinetId)->settings;

        $modeHuman = [
            'auto_response' => '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç',
            'positive_response' => '–û—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ',
            'manual_confirmation' => '–†—É—á–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
            'combined' => '–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º',
        ];

        $mySettingsString .= "–†–µ–∂–∏–º: <code>" . $modeHuman[$settings['onboarding']['mode']] . "</code>\n";
        $mySettingsString .= "–†–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: <code>" . $settings['onboarding']['advertisement_message'] . "</code>\n";
        $mySettingsString .= "–ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é: <code>" . $settings['onboarding']['call_to_action'] . "</code>\n";

        $message = "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏ –º–µ–Ω—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ—Ç–∑—ã–≤—ã.
–ú–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:

{$mySettingsString}

–í –ø—Ä–æ—Ñ–∏–ª–µ –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ –¥—Ä—É–≥–∏–µ üôå
";
        $keyboard = new InlineKeyboardMarkup([
            [['text' => 'üöÄ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—è', 'callback_data' => 'welcome_add_key']] 
        ]);
        $this->sendOrUpdateMessage($chatId, $messageId, $message, $keyboard, 'HTML');
    }

    public function setStartMode($chatId, $cabinetId, $messageId, $mode)
    {
        $user = Auth::user();
        $cabinet = $user->cabinets()->findOrFail($cabinetId);
        $settings = $cabinet->settings;
        // Init onboarding settings if they don't exist
        $settings = $this->checkOnboarding($settings); 

        $settings['onboarding']['start_mode'] = $mode;
        $cabinet->settings = $settings;
        $cabinet->save();
        
        $this->sendResultMessage($chatId, $messageId, $cabinetId, $mode);
    }

    public function sendResultMessage($chatId, $messageId = null, $cabinetId, $mode)
    {
        //Mode is new or all
        if($mode == 'new'){
            $message = "–û—Ç–ª–∏—á–Ω–æ!

–° —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ —è –±—É–¥—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤—Å–µ –Ω–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã, –ø–æ—Å—Ç—É–ø–∞—é—â–∏–µ –≤ –≤–∞—à –∫–∞–±–∏–Ω–µ—Ç üöÄ";
        }else{
            $message = "–û—Ç–ª–∏—á–Ω–æ, –ø—Ä–∏—Å—Ç—É–ø–∞—é!

–Ø —Å–µ–π—á–∞—Å –∑–∞–π–º—É—Å—å –æ—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ –≤—Å–µ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã –≤ –≤–∞—à–µ–º –∫–∞–±–∏–Ω–µ—Ç–µ. –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –∏ –≤—Å–∫–æ—Ä–µ –≤—Å–µ –≤–∞—à–∏ –∫–ª–∏–µ–Ω—Ç—ã –ø–æ–ª—É—á–∞—Ç –æ—Ç–≤–µ—Ç—ã.";
        }
        $keyboard = new InlineKeyboardMarkup([
            [['text' => 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', 'callback_data' => 'welcome_start']] 
        ]);
        $this->sendOrUpdateMessage($chatId, $messageId, $message, $keyboard);
    }

    public function checkOnboarding($settings)
    {
        if (!isset($settings['onboarding']) || !is_array($settings['onboarding'])) {
            $settings['onboarding'] = [
                'brand_name' => null,
                'mode' => null,
                'advertisement_message' => null,
                'call_to_action' => null,
                'start_mode' => null,
            ];
        }
        return $settings;
    }

    protected function sendOrUpdateMessage($chatId, $messageId = null, $message, $keyboard = null, $parse_mode = null)
    {
        if ($messageId) {
            try {
                return $this->bot->editMessageText($chatId, $messageId, $message, $parse_mode, false, $keyboard);
            } catch (\Exception $e) {
                // If editing fails, send a new message
                return $this->bot->sendMessage($chatId, $message, $parse_mode, false, null, $keyboard);
            }
        } else {
            return $this->bot->sendMessage($chatId, $message, $parse_mode, false, null, $keyboard);
        }
    }
}